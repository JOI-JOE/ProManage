<?php

namespace App\Http\Controllers\Api;

use App\Events\ChecklistItemCreated;
use App\Events\ChecklistItemDeleted;
use App\Events\ChecklistItemToggle;
use App\Events\ChecklistItemUpdated;
use App\Http\Controllers\Controller;
use App\Models\CheckList;
use App\Models\ChecklistItem;
use Illuminate\Http\Request;

class ChecklistItemController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    // L·∫•y checklist_item theo checklist
    public function getChecklistItems($checklistId)
    {
        $checklist = CheckList::find($checklistId);

        return response()->json([
            'status' => 'success',
            'data' => $checklist->items // S·ª≠ d·ª•ng quan h·ªá items t·ª´ model Checklist
        ], 200);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'checklist_id' => 'required|exists:checklists,id',
            'name' => 'required|string',
        ]);

        // T·∫°o m·ªõi CheckListItem
        $checklistItem = ChecklistItem::create($validatedData);

        \Log::info("üöÄ G·ªçi broadcast ChecklistItemCreated");
        broadcast(new ChecklistItemCreated($checklistItem))->toOthers();

        return response()->json([
            'status' => true,
            'message' => 'Th√™m m·ª•c checklist th√†nh c√¥ng!',
            'data' => $checklistItem
        ], 201);
    }

    /**
     * Display the specified resource.
     */


    /**
     * Update the specified resource in storage.
     */
    public function updateName(Request $request, $id)
    {
        // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
        $validated = $request->validate([
            'name' => 'required|string|max:255',
        ]);

        // T√¨m ChecklistItem v√† c·∫≠p nh·∫≠t t√™n
        $item = ChecklistItem::findOrFail($id);
        $item->update(['name' => $validated['name']]);

        broadcast(new ChecklistItemUpdated($item))->toOthers();

        // Tr·∫£ v·ªÅ ph·∫£n h·ªìi JSON
        return response()->json([
            'status' => true,
            'message' => 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
            'data' => $item
        ], 200); // HTTP status code 200 (OK)
    }
    // h√†m t√≠nh to√°n ph·∫ßn trƒÉm
    public function calculateCompletionRate($checklistId)
    {
        $totalItems = ChecklistItem::where('checklist_id', $checklistId)->count();
        // l·∫•y t·ªïng s·ªë checklist_item theo checklist_id
        $completedItems = ChecklistItem::where('checklist_id', $checklistId)->where('is_completed', true)->count();
        // l·∫•y t·ªïng s·ªë checklist_item theo checklist_id c√≥ tr·∫°ng th√°i ho√†n th√†nh b·∫±ng true

        return $totalItems > 0 ? round(($completedItems / $totalItems) * 100, 2) : 0;
        // n·∫øu $totalItem>0 th√¨ t√≠nh to√°n  v√† l√†m tr√≤n 2 s·ªë th·∫≠p ph√¢n c√≤n ng∆∞·ª£c l·∫°i th√¨ tr·∫£ v·ªÅ o%
    }
    // c·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh
    public function toggleCompletionStatus($id)
    {
        try {
            // T√¨m item ho·∫∑c tr·∫£ v·ªÅ l·ªói n·∫øu kh√¥ng t·ªìn t·∫°i
            $item = ChecklistItem::findOrFail($id);

            $checklist = $item->checklist;
            if (!$checklist) {
                return response()->json([
                    'status' => false,
                    'message' => 'Checklist kh√¥ng t·ªìn t·∫°i',
                ], 404);
            }

            // L·∫•y card t·ª´ checklist
            $card = $checklist->card;

            // ƒê·∫£o ng∆∞·ª£c tr·∫°ng th√°i hi·ªán t·∫°i (false -> true, true -> false)
            $newStatus = !$item->is_completed;
            $item->update([
                'is_completed' => $newStatus,
            ]);

            // L·∫•y th√¥ng tin user
            $user_name = auth()->user()?->full_name ?? 'ai ƒë√≥';
            $statusText = $newStatus ? 'ho√†n t·∫•t' : 'ch∆∞a ho√†n t·∫•t';

            // Ghi log n·∫øu tr·∫°ng th√°i thay ƒë·ªïi
            $activity=  activity()
                ->causedBy(auth()->user())
                ->performedOn($card)
                ->event('updated_checklist_status')
                ->withProperties([
                    'checklist_id' => $item->checklist_id,
                    'item_title' => $item->name,
                    'status' => $statusText,
                ])
                ->log("{$user_name} ƒë√£ ƒë√°nh d·∫•u {$item->name} l√† {$statusText} ·ªü th·∫ª n√†y");

            // T√≠nh ph·∫ßn trƒÉm ho√†n th√†nh c·ªßa checklist ch·ª©a item n√†y
            // $completionRate = $this->calculateCompletionRate($item->checklist_id) . '%';

            broadcast(new ChecklistItemToggle($item, $card->id, $activity));

            return response()->json([
                'status' => true,
                'message' => 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng',
                'data' => $item,
                // 'completion_rate' => $completionRate,
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'status' => false,
                'message' => 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i',
                'error' => $e->getMessage(),
            ], 500);
        }
    }


    /**
     * Remove the specified resource from storage.
     */
    public function destroy($id)
    {
        // T√¨m ChecklistItem theo id, n·∫øu kh√¥ng t√¨m th·∫•y s·∫Ω t·ª± ƒë·ªông tr·∫£ v·ªÅ l·ªói 404
        $item = ChecklistItem::findOrFail($id);
        $cardId = $item->checklist->card_id;

        // X√≥a ChecklistItem
        $item->delete();

        broadcast(new ChecklistItemDeleted($id, $cardId))->toOthers();

        // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
        return response()->json([
            'status' => true,
            'message' => 'X√≥a ChecklistItem th√†nh c√¥ng!',
        ], 200);
    }
}
