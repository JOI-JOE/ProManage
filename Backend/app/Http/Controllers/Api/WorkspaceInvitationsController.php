<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Workspace;
use App\Models\WorkspaceInvitations;
use App\Models\WorkspaceMembers;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;


class WorkspaceInvitationsController extends Controller
{
    // protected $emailController;

    // public function __construct(EmailController $emailController)
    // {
    //     $this->emailController = $emailController;
    // }

    public function acceptInvitation($workspaceId, $inviteToken)
    {
        try {
            $user = Auth::user();

            // L·∫•y th√¥ng tin workspace
            $workspace = Workspace::find($workspaceId);
            if (!$workspace) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Workspace not found.',
                ], 404);
            }

            $invitation = WorkspaceInvitations::where('workspace_id', $workspaceId)
                ->where('invite_token', $inviteToken)
                ->first();

            if (!$invitation) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Invalid or expired invitation.',
                ], 404);
            }

            // Ki·ªÉm tra user ƒë√£ l√† th√†nh vi√™n ch∆∞a
            $isMember = WorkspaceMembers::where('id_workspace', $workspaceId)
                ->where('id_member', $user->id)
                ->exists();

            if ($isMember) {
                return response()->json([
                    'status' => 'success',
                    'message' => 'User is already a member of this workspace.',
                ], 200);
            }

            // N·∫øu user ch∆∞a l√† th√†nh vi√™n, th√™m h·ªç v√†o workspace
            WorkspaceMembers::create([
                'id_workspace' => $workspaceId,
                'id_member' => $user->id,
                'member_type' => 'normal', // Ho·∫∑c lo·∫°i th√†nh vi√™n kh√°c t√πy thu·ªôc v√†o logic c·ªßa b·∫°n
                'is_unconfirmed' => false, // ƒê√£ x√°c nh·∫≠n
                'joined' => true, // Ng√†y tham gia
                'is_deactivated' => false, // Kh√¥ng v√¥ hi·ªáu h√≥a
                'last_active' => now(), // L·∫ßn ho·∫°t ƒë·ªông cu·ªëi c√πng
            ]);

            return response()->json([
                'status' => 'success',
                'message' => 'User has been successfully added to the workspace.',
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Failed to accept invitation: ' . $e->getMessage(),
            ], 500);
        }
    }
    public function getInvitationSecret($workspaceId)
    {
        try {
            // Ki·ªÉm tra xem workspaceId c√≥ h·ª£p l·ªá kh√¥ng
            if (!is_numeric($workspaceId) || $workspaceId <= 0) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Invalid workspace ID.',
                ], 400);
            }

            // Ki·ªÉm tra xem workspace c√≥ t·ªìn t·∫°i hay kh√¥ng
            $workspace = Workspace::find($workspaceId);
            if (!$workspace) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Workspace not found.',
                ], 404);
            }

            // L·∫•y invitationSecret d·ª±a tr√™n workspaceId
            $invitation = WorkspaceInvitations::where('workspace_id', $workspaceId)->first();

            if ($invitation) {
                return response()->json([
                    'invitationSecret' => $invitation->secret,
                    'type' => 'normal'
                ], 200);
            } else {
                // Tr·∫£ v·ªÅ th√¥ng b√°o n·∫øu kh√¥ng t√¨m th·∫•y invitationSecret
                return response()->json([
                    'status' => 'error',
                    'message' => 'No invitation secret found for this workspace.',
                ], 404);
            }
        } catch (\Exception $e) {
            // X·ª≠ l√Ω c√°c ngo·∫°i l·ªá kh√°c
            return response()->json([
                'status' => 'error',
                'message' => 'Failed to retrieve invitation secret.',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    public function createInvitationSecret($workspaceId, $acceptUnconfirmed = false)
    {
        try {
            // Ki·ªÉm tra xem     workspace c√≥ t·ªìn t·∫°i kh√¥ng
            $workspace = Workspace::findOrFail($workspaceId);

            if (!Auth::check()) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Unauthorized: User not authenticated.',
                ], 401);
            }

            $invitedByMember = Auth::user();

            $inviteToken = Str::uuid()->toString();

            $invitation = WorkspaceInvitations::create([
                'workspace_id' => $workspace->id,
                'invite_token' => $inviteToken,
                'accept_unconfirmed' => $acceptUnconfirmed,
                'invited_by_member_id' => $invitedByMember->id,
            ]);

            return response()->json([
                'secret' => $invitation->invite_token,
                'type' => 'normal'
            ], 201);
        } catch (ModelNotFoundException $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Workspace not found. Please check the workspace ID.',
            ], 404);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Failed to create invitation: ' . $e->getMessage(),
            ], 500);
        }
    }

    // Function t·∫Øt (h·ªßy) li√™n k·∫øt l·ªùi m·ªùi
    public function cancelInvitationSecret($workspaceId)
    {
        try {
            // T√¨m l·ªùi m·ªùi c√≤n hi·ªáu l·ª±c
            $invitation = WorkspaceInvitations::where('workspace_id', $workspaceId)
                ->first();

            if (!$invitation) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi h·ª£p l·ªá ƒë·ªÉ h·ªßy!',
                ], 404);
            }

            return response()->json([
                'status' => 'success',
                'message' => 'L·ªùi m·ªùi ƒë√£ b·ªã h·ªßy!',
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'L·ªói khi h·ªßy l·ªùi m·ªùi: ' . $e->getMessage(),
            ], 500);
        }
    }

    public function validateInvitation($workspaceId, $inviteToken)
    {
        try {
            if (!Workspace::where('id', $workspaceId)->exists()) {
                return response()->json([
                    'isValid' => false,
                    'message' => 'Workspace kh√¥ng t·ªìn t·∫°i!'
                ], 404);
            }

            // Ki·ªÉm tra l·ªùi m·ªùi c√≥ h·ª£p l·ªá v·ªõi token hay kh√¥ng
            $invitation = WorkspaceInvitations::where('workspace_id', $workspaceId)
                ->where('invite_token', $inviteToken)
                ->first();

            if (!$invitation) {
                return response()->json([
                    'isValid' => false,
                    'message' => 'L·ªùi m·ªùi kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!'
                ], 400);
            }

            return response()->json([
                'displayName' => $invitation->workspace->display_name,
                'name' => $invitation->workspace->name,
                'id' => $invitation->workspace->id,
                'type' => 'normal'
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'isValid' => false,
                'error' => $e->getMessage()
            ], 500);
        }
    }


    // public function searchNewMembersToWorkspace(Request $request)
    // {

    //     $queryText = $request->input('query');  // T·ª´ kh√≥a t√¨m ki·∫øm (t√™n ho·∫∑c email)
    //     $workspaceId = $request->input('workspace_id'); // ID c·ªßa workspace

    //     $members = User::where(function ($queryBuilder) use ($queryText) {
    //         $queryBuilder->where('user_name', 'LIKE', "%{$queryText}%")
    //             ->orWhere('full_name', 'LIKE', "%{$queryText}%")
    //             ->orWhere('email', 'LIKE', "%{$queryText}%");
    //     })
    //         ->limit(7)  // üîπ Ch·ªâ l·∫•y t·ªëi ƒëa 7 user
    //         ->get();



    //     return response()->json([
    //         'message' => 'Members retrieved successfully',
    //         'members' => $members
    //     ]);
    // }


    // public function inviteMemberToWorkspace(Request $request, $idWorkspace)
    // {


    //     // üìå n·∫øu tr∆∞·ªùng h·ª£p truy·ªÅn b·∫±ng email th√¨ sau khi b·∫•m entern s·∫Ω ƒë∆∞·ª£c v√†o th·∫≥ng input lu√¥n
    //     // üìå n·∫øu tr∆∞·ªùng h·ª£p display_name, user_name th√¨ s·∫Ω hi·ªán ra m·ªôt danh s√°ch c√°c ng∆∞·ªùi c√≥ th·ªÉ m·ªùi v√† b·∫°n ph·∫£i b·∫•m ch·ªçn
    //     /*üìù 
    //         - n·∫øu ch·ªçn t√™n c√≥ t·ªìn t·∫°i th√¨ n√≥ s·∫Ω tr√≠ch xu·∫•t t·ª´ user_name ƒë√≥ sang -> id v√† t·ª´ ƒë√≥ ta c√≥ email ƒë·ªÉ g·ª≠i cho member
    //         - n·∫øu l·∫•y email th√¨ n√≥ s·∫Ω l·∫•y lu√¥n ƒë∆∞·ªùng d·∫´n email -> khi b·∫•m g·ª≠i th√¨ n√≥ s·∫Ω g·ª≠i email m·ªùi ng∆∞·ªùi d√πng v√†o trello
    //         */

    //     $memberInputs = $request->input('members', []); // L·∫•y danh s√°ch nh·∫≠p v√†o
    //     // ‚ö†Ô∏è => s·∫Ω c√≥ 3 tr∆∞·ªùng h·ª£p input nh·∫≠n v√†o 
    //     // Ngo Dang Hau    -> full_name
    //     // @haungodang2003 -> user_name
    //     // haungoadang2003@gmail.com ->email

    //     $total_member = []; // M·∫£ng l∆∞u danh s√°ch th√†nh vi√™n h·ª£p l·ªá

    //     foreach ($memberInputs as $member) {
    //         $isEmail = filter_var($member, FILTER_VALIDATE_EMAIL); // Ki·ªÉm tra c√≥ ph·∫£i email kh√¥ng

    //         if ($isEmail) {

    //             if (!isset($total_members[$member])) { // Tr√°nh tr√πng l·∫∑p email
    //                 $total_members[$member] = [
    //                     'workspace_id'      => $idWorkspace,
    //                     'invited_member_id' => null,
    //                     'email'             => $member,
    //                 ];
    //             }
    //         } else {
    //             // üìå T√¨m ID c·ªßa ng∆∞·ªùi d√πng d·ª±a v√†o username ho·∫∑c full_name
    //             $userId = User::where('user_name', $member)
    //                 ->orWhere('full_name', $member)
    //                 ->value('id');

    //             $idToStore = $userId ?: $member;

    //             if (!isset($total_members[$idToStore])) { // Tr√°nh tr√πng l·∫∑p ID
    //                 $total_members[$idToStore] = [
    //                     'workspace_id'      => $idWorkspace,
    //                     'invited_member_id' => $idToStore,
    //                     'email'             => null,
    //                 ];
    //             }
    //         }
    //     }

    //     // üìå L∆∞u t·∫•t c·∫£ l·ªùi m·ªùi v√†o database m·ªôt l·∫ßn
    //     foreach ($total_members as $invitationData) {
    //         WorkspaceInvitations::firstOrCreate($invitationData);
    //     }

    //     // üìå Tr·∫£ v·ªÅ danh s√°ch ID ho·∫∑c email
    //     return response()->json([
    //         'members' => array_keys($total_members), // Ch·ªâ tr·∫£ v·ªÅ danh s√°ch ID ho·∫∑c email
    //     ]);
    // }

    // public function sendInvitationById(Request $request, $idWorkspace, $idMember)
    // {
    //     $member_invitation = WorkspaceInvitations::where('workspace_id', $idWorkspace)
    //         ->where('invited_member_id', $idMember)->first();


    //     if ($member_invitation) {
    //         $member_invitation->update([
    //             'accept_unconfirmed' => true,
    //             'invitation_message' => $request->input('invitationMessage'),
    //             'type' => 'normal'
    //         ]);

    //         return response()->json([
    //             'invitation' => $member_invitation
    //         ], 200);
    //     }
    //     return response()->json([
    //         'message' => 'Invitation not found'
    //     ], 404);
    // }
    // public function sendInvitationByEmail(Request $request, $idWorkspace)
    // {
    //     $member_invitations = WorkspaceInvitations::where('workspace_id', $idWorkspace)
    //         ->whereNotNull('email') // Ch·ªâ l·∫•y c√°c l·ªùi m·ªùi c√≥ email
    //         ->get();

    //     if ($member_invitations->isNotEmpty()) {
    //         foreach ($member_invitations as $invitation) {
    //             $invitation->update([
    //                 'accept_unconfirmed' => false,
    //                 'invitation_message' => $request->input('invitationMessage'),
    //                 'type' => 'normal'
    //             ]);
    //         }

    //         return response()->json([
    //             'message' => 'Invitations sent successfully',
    //             // 'member'  => ''
    //         ], 200);
    //     }

    //     return response()->json([
    //         'message' => 'Invitation not found'
    //     ], 404);
    // }
}
