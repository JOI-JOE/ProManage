<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Jobs\SendWorkspaceEmailJob;
use App\Models\User;
use App\Models\Workspace;
use App\Models\WorkspaceInvitations;
use App\Models\WorkspaceMembers;
use App\Services\GoogleService;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;
use Symfony\Component\HttpFoundation\Response;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class WorkspaceInvitationsController extends Controller
{

    protected $googleService;

    public function __construct(GoogleService $googleService)
    {
        $this->googleService = $googleService;
    }

    public function acceptInvitation($workspaceId, $inviteToken)
    {
        try {
            $user = Auth::user();
            // L·∫•y th√¥ng tin workspace
            $workspace = Workspace::find($workspaceId);
            if (!$workspace) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Workspace not found.',
                ], 404);
            }

            $invitation = WorkspaceInvitations::where('workspace_id', $workspaceId)
                ->where('invite_token', $inviteToken)
                ->first();

            if (!$invitation) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Invalid or expired invitation.',
                ], 404);
            }

            // Ki·ªÉm tra user ƒë√£ l√† th√†nh vi√™n ch∆∞a
            $isMember = WorkspaceMembers::where('workspace_id', $workspaceId)
                ->where('user_id', $user->id)
                ->exists();

            if ($isMember) {
                return response()->json([
                    'status' => 'success',
                    'message' => 'User is already a member of this workspace.',
                ], 200);
            }

            // N·∫øu user ch∆∞a l√† th√†nh vi√™n, th√™m h·ªç v√†o workspace
            WorkspaceMembers::create([
                'workspace_id' => $workspaceId,
                'user_id' => $user->id,
                'member_type' => 'normal', // Ho·∫∑c lo·∫°i th√†nh vi√™n kh√°c t√πy thu·ªôc v√†o logic c·ªßa b·∫°n
                'is_unconfirmed' => false, // ƒê√£ x√°c nh·∫≠n
                'joined' => true, // Ng√†y tham gia
                'is_deactivated' => false, // Kh√¥ng v√¥ hi·ªáu h√≥a
                'last_active' => now(), // L·∫ßn ho·∫°t ƒë·ªông cu·ªëi c√πng
            ]);

            return response()->json([
                'status' => 'success',
                'message' => 'User has been successfully added to the workspace.',
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Failed to accept invitation: ' . $e->getMessage(),
            ], 500);
        }
    }
    public function getInvitationSecret($workspaceId)
    {
        try {
            // Ki·ªÉm tra xem workspace c√≥ t·ªìn t·∫°i hay kh√¥ng
            $workspace = Workspace::find($workspaceId);
            if (!$workspace) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Workspace not found.',
                ], 404);
            }

            // L·∫•y invitationSecret d·ª±a tr√™n workspaceId
            $invitation = WorkspaceInvitations::where('workspace_id', $workspaceId)->first();

            if ($invitation) {
                return response()->json([
                    'invitationSecret' => $invitation->invite_token,
                    'type' => 'normal'
                ], 200);
            } else {
                // Tr·∫£ v·ªÅ th√¥ng b√°o n·∫øu kh√¥ng t√¨m th·∫•y invitationSecret
                return response()->json([
                    "No invitation secret found for this workspace."
                ], 404);
            }
        } catch (\Exception $e) {
            // X·ª≠ l√Ω c√°c ngo·∫°i l·ªá kh√°c
            return response()->json([
                'status' => 'error',
                'message' => 'Failed to retrieve invitation secret.',
                'error' => $e->getMessage(),
            ], 500);
        }
    }
    public function createInvitationSecret($workspaceId, $acceptUnconfirmed = false)
    {
        $workspace = Workspace::findOrFail($workspaceId);

        $invitation = WorkspaceInvitations::create([
            'workspace_id' => $workspace->id,
            'invite_token' => Str::uuid()->toString(),
            'accept_unconfirmed' => $acceptUnconfirmed,
            'invited_by_member_id' => Auth::id(),
        ]);

        return response()->json([
            'secret' => $invitation->invite_token,
            'type' => 'normal'
        ], 201);
    }
    // Function t·∫Øt (h·ªßy) li√™n k·∫øt l·ªùi m·ªùi
    public function cancelInvitationSecret($workspaceId)
    {
        try {
            $invitation = WorkspaceInvitations::where('workspace_id', $workspaceId)->firstOrFail();

            $invitation->delete();

            return response()->json([
                'status' => 'success',
                'message' => 'L·ªùi m·ªùi ƒë√£ b·ªã h·ªßy!',
            ], Response::HTTP_OK);
        } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi h·ª£p l·ªá ƒë·ªÉ h·ªßy!',
            ], Response::HTTP_NOT_FOUND);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'L·ªói khi h·ªßy l·ªùi m·ªùi: ' . $e->getMessage(),
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }
    public function getValidateInvitation($workspaceId, $inviteToken)
    {
        // ƒêI·ªÄU KI·ªÜN
        // - ki·ªÉm tra token, workspaceID c√≥ t·ªìn t·∫°i kh√¥ng
        // n·∫øu t·ªìn t·∫°i
        // - ki·ªÉm tra workspaceID ƒë√≥ ·ªü ch·∫ø ƒë·ªô private hay public
        //  -> private th√¨ ng∆∞·ªùi d√πng s·∫Ω kh√¥ng ƒë∆∞·ª£c v√†o
        //  -> public th√¨ cho v√†o

        // - tr∆∞·ªùng h·ª£p public th√¨ ph·∫£i hi·ªán t√™n ra
        // - ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ trong workspace ƒë√≥ ch∆∞a
        //  -> n·∫øu ch∆∞a c√≥ th√¨ cho v√†o 
        //  -> c√≤n n·∫øu c√≥ r·ªìi th√¨ theo ƒë∆∞·ªùng d·∫´n m√† v√†o
        try {
            // Ki·ªÉm tra xem workspace v√† invitation c√≥ t·ªìn t·∫°i kh√¥ng
            $invitation = WorkspaceInvitations::where('workspace_id', $workspaceId)
                ->where('invite_token', $inviteToken)
                ->whereHas('workspace', function ($query) use ($workspaceId) {
                    $query->where('id', $workspaceId)
                        ->where('permission_level', 'public');
                })
                ->with('workspace') // Eager load m·ªëi quan h·ªá workspace
                ->firstOrFail();

            // Truy c·∫≠p d·ªØ li·ªáu c·ªßa workspace
            $workspace = $invitation->workspace;
            $inventer = $workspace->user;
            // $memberInviter = [

            // ]

            $workspaceData = [
                'displayName' => $workspace->display_name,
                'id'          => $workspace->id,
                'name'        => $workspace->name,
            ];

            $memberInventer = [
                'fullName' => $inventer->full_name,
                'id'       => $inventer->id
            ];

            return response()->json([
                'workspace'     => $workspaceData,
                'memberInviter' => $memberInventer,
                'type'      => "normal"
            ], 200);
        } catch (ModelNotFoundException $e) {
            return response()->json([
                'isValid' => false,
                'message' => 'Workspace ho·∫∑c l·ªùi m·ªùi kh√¥ng t·ªìn t·∫°i!',
            ], 404);
        } catch (\Exception $e) {
            return response()->json([
                'isValid' => false,
                'message' => 'ƒê√£ x·∫£y ra l·ªói khi x√°c th·ª±c l·ªùi m·ªùi: ' . $e->getMessage(),
            ], 500);
        }
    }

    // S·ª≠ l√Ω function t√¨m ki·∫øm - h·∫≠u l√†m
    public function searchMembers(Request $request)
    {
        $queryText   = $request->input('query', '');
        $idWorkspace = (string) $request->input('idWorkspace');

        // üîç Truy v·∫•n User d·ª±a tr√™n ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
        $users = User::select(['id', 'user_name', 'full_name', 'image', 'email'])
            ->where(function ($query) use ($queryText) {
                $query->where('user_name', 'LIKE', "$queryText%")
                    ->orWhere('full_name', 'LIKE', "$queryText%")
                    ->orWhere('email', 'LIKE', "$queryText%");
            })
            ->with([
                'workspaceMember:workspace_id,user_id,joined,member_type',
                'boardMember:board_id,user_id,joined'
            ])
            ->orderBy('id') // T·ªëi ∆∞u index
            ->limit(7) // üî• Gi·ªõi h·∫°n ch·ªâ l·∫•y 7 user
            ->get();

        // ‚úÖ X·ª≠ l√Ω d·ªØ li·ªáu
        $users = $users->map(function ($user) use ($queryText, $idWorkspace) {
            // √âp ki·ªÉu workspace ID th√†nh chu·ªói UTF-8
            $workspaceIds = $user->workspaceMember->pluck('workspace_id')
                ->map(fn($id) => (string) $id)
                ->toArray();

            // üî• L·ªçc nh·ªØng workspace c√≥ ID g·∫ßn gi·ªëng v·ªõi `$idWorkspace`
            $filteredWorkspaces = array_values(array_filter($workspaceIds, function ($workspaceId) use ($idWorkspace) {
                $workspaceId = trim($workspaceId);
                $idWorkspace = trim($idWorkspace);

                if (!mb_check_encoding($workspaceId, 'UTF-8') || !mb_check_encoding($idWorkspace, 'UTF-8')) {
                    return false; // B·ªè qua n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
                }

                if ($workspaceId === $idWorkspace) {
                    return true; // N·∫øu ID tr√πng kh·ªõp ho√†n to√†n
                }

                if (is_numeric($workspaceId) && is_numeric($idWorkspace)) {
                    return abs((int) $workspaceId - (int) $idWorkspace) <= 1; // N·∫øu ch√™nh l·ªách nh·ªè
                }

                similar_text($workspaceId, $idWorkspace, $percent);
                return $percent > 80 || levenshtein($workspaceId, $idWorkspace) <= 2;
            }));

            // üîπ L·∫•y lo·∫°i th√†nh vi√™n (member_type)
            $memberType = optional($user->workspaceMember->firstWhere('workspace_id', $idWorkspace))->member_type;

            // üîπ D·ªØ li·ªáu tr·∫£ v·ªÅ
            $data = [
                'id'          => $user->id,
                'user_name'   => $user->user_name,
                'full_name'   => $user->full_name,
                'initials'    => strtoupper(substr($user->full_name, 0, 1)), // Ch·ªØ c√°i ƒë·∫ßu ti√™n
                'image'       => $user->image ?? null,
                'email'       => $user->email,
                'idBoards'    => $user->boardMember->pluck('board_id')->toArray(),
                'idWorkspace' => $filteredWorkspaces, // L·ªçc nh·ªØng workspace g·∫ßn gi·ªëng
                'memberType'  => $memberType,
                'similarity'  => $this->calculateSimilarityScore($user, $queryText, $idWorkspace),
                'joined'      => $user->workspaceMember->where('workspace_id', $idWorkspace)->where('joined', true)->isNotEmpty(),
            ];

            // üî• ƒê·∫£m b·∫£o UTF-8 h·ª£p l·ªá tr∆∞·ªõc khi tr·∫£ v·ªÅ JSON
            array_walk_recursive($data, function (&$value) {
                if (is_string($value)) {
                    $value = mb_convert_encoding($value, 'UTF-8', 'UTF-8');
                }
            });

            return $data;
        });

        return response()->json($users, 200, [], JSON_UNESCAPED_UNICODE);
    }

    public function calculateSimilarityScore(User $user, $queryText, $idWorkspace)
    {
        $score = 0;

        // üîç T√≠nh similarity gi·ªØa queryText v√† c√°c tr∆∞·ªùng c·ªßa User
        $score += max(
            $this->calculateSimilarity($queryText, $user->user_name),
            $this->calculateSimilarity($queryText, $user->full_name),
            $this->calculateSimilarity($queryText, $user->email ?? '')
        );

        // ‚úÖ Ki·ªÉm tra n·∫øu User ƒë√£ tham gia workspace
        $isJoinedWorkspace = $user->workspaceMember
            ->where('workspace_id', $idWorkspace)
            ->where('joined', true)
            ->isNotEmpty();

        if ($isJoinedWorkspace) {
            $score += 0.2; // ƒê√£ tham gia workspace
        }

        // ‚úÖ Ki·ªÉm tra similarity gi·ªØa ID Workspace c·ªßa User v·ªõi $idWorkspace
        foreach ($user->workspaceMember as $workspace) {
            $workspaceSimilarity = $this->calculateSimilarity($idWorkspace, $workspace->workspace_id);
            if ($workspaceSimilarity > 0.7) { // N·∫øu ID kh√° gi·ªëng nhau
                $score += 0.1;
            }
            // N·∫øu workspace_id kh·ªõp ho√†n to√†n v√† User ƒë√£ tham gia workspace
            if ($isJoinedWorkspace && $workspace->workspace_id == $idWorkspace) {
                $score += 0.1;
            }
            //  N·∫øu user c√≥ role l√† admin ho·∫∑c normal th√¨ tƒÉng th√™m ƒëi·ªÉm
            $isAdminOrNormal = $user->workspaceMember->contains(function ($workspace) {
                return in_array(optional($workspace)->member_type, ['admin', 'normal']);
            });

            if ($isAdminOrNormal) {
                $score += 0.2;
            }
        }

        //  Ki·ªÉm tra n·∫øu User ƒë√£ tham gia √≠t nh·∫•t m·ªôt Board trong workspace hi·ªán t·∫°i
        $isInBoard = $user->boardMember->contains(
            fn($boardMember) =>
            optional($boardMember->board)->workspace_id === $idWorkspace && $boardMember->joined
        );

        if ($isInBoard) {
            $score += 0.1;
        }

        return $score;
    }

    private function calculateSimilarity($query, $text)
    {
        if (!$text) return 0;
        similar_text(strtolower($query), strtolower($text), $percent);
        return $percent / 100;
    }
    // End
    public function confirmWorkspaceMembers($workspaceId, $memberId, Request $request)
    {
        // T√¨m th√†nh vi√™n trong workspace
        $member = WorkspaceMembers::where('workspace_id', $workspaceId)
            ->where('user_id', $memberId)
            ->first();

        // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y th√†nh vi√™n
        if (!$member) {
            return response()->json([
                'message' => 'Member not found in workspace'
            ], 404);
        }

        // Ki·ªÉm tra n·∫øu th√†nh vi√™n ƒë√£ x√°c nh·∫≠n tr∆∞·ªõc ƒë√≥
        if ($member->joined) {
            return response()->json([
                'message' => 'Member already confirmed',
                'updated_member' => $member
            ], 200);
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa th√†nh vi√™n
        WorkspaceMembers::where('workspace_id', $workspaceId)
            ->where('user_id', $memberId)
            ->update([
                'joined' => true,
                'member_type' => $member->member_type === 'pending' ? 'normal' : $member->member_type
            ]);

        // G·ª≠i email x√°c nh·∫≠n n·∫øu c√≥ th√¥ng tin email
        $user = User::find($memberId);
        if ($user && $user->email) {
            $invitationMessage = $request->input('invitationMessage', '') ?? ''; // ƒê·∫£m b·∫£o lu√¥n l√† chu·ªói
            $this->sendConfirmationEmail($user, $invitationMessage);
        }

        return response()->json([
            'message' => 'Member confirmed successfully',
            'updated_member' => WorkspaceMembers::where('workspace_id', $workspaceId)
                ->where('user_id', $memberId)
                ->first()
        ], 200);
    }

    /**
     * G·ª≠i email x√°c nh·∫≠n cho th√†nh vi√™n m·ªõi
     */
    private function sendConfirmationEmail(User $user, $invitationMessage = '')
    {
        try {
            // L·∫•y user ƒëang x√°c nh·∫≠n (admin ho·∫∑c ng∆∞·ªùi m·ªùi)
            $adminUser = Auth::user();
            if (!$adminUser) {
                throw new \Exception("Admin user not authenticated");
            }

            // Ki·ªÉm tra token Google c·ªßa admin
            if (!$adminUser->google_access_token) {
                throw new \Exception("Admin Google Access Token not found");
            }

            // Ki·ªÉm tra & l√†m m·ªõi token n·∫øu c·∫ßn
            $accessToken = $this->refreshTokenIfNeeded($adminUser, $adminUser->google_access_token, $adminUser->google_refresh_token);

            // T·∫°o n·ªôi dung email
            $emailBody = "Ch√†o {$user->full_name}, b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n tham gia v√†o workspace!";
            if (!empty($invitationMessage)) {
                $emailBody .= "\n\nüì© L·ªùi nh·∫Øn t·ª´ ng∆∞·ªùi m·ªùi:\n\"$invitationMessage\"";
            }

            // G·ª≠i email b·∫•t ƒë·ªìng b·ªô
            dispatch(new SendWorkspaceEmailJob(
                $accessToken,
                $adminUser->full_name,
                [$user->email],
                "X√°c nh·∫≠n tham gia workspace",
                $emailBody
            ));
        } catch (\Exception $e) {
            Log::error("G·ª≠i email x√°c nh·∫≠n th·∫•t b·∫°i: " . $e->getMessage());
        }
    }


    /**
     * Ki·ªÉm tra v√† l√†m m·ªõi access token n·∫øu c·∫ßn
     */
    private function refreshTokenIfNeeded($user, $accessToken, $refreshToken)
    {
        if ($this->googleService->isAccessTokenExpired($accessToken)) {
            if (!$refreshToken) {
                throw new \Exception('Access token expired and no refresh token available. Please re-authenticate.');
            }

            // L√†m m·ªõi token
            $newToken = $this->googleService->refreshAccessToken($refreshToken, $user);
            $accessToken = $newToken['access_token'];

            // C·∫≠p nh·∫≠t v√†o database
            $user->update([
                'google_access_token' => $accessToken,
                'google_refresh_token' => $newToken['refresh_token'] ?? $user->google_refresh_token,
            ]);
        }

        return $accessToken;
    }
}
