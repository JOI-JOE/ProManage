<?php

namespace App\Http\Controllers\api;

use App\Events\ActivityEvent;
use App\Events\CardArchiveToggled;
use App\Events\CardCompletedToggled;
use App\Events\CardCopied;
use App\Events\CardCreate;
use App\Events\CardMoved;
use App\Models\Attachment;
use App\Models\CardLabel;
use App\Models\CheckList;
use App\Models\CommentCard;
use App\Events\CardCreated;
use App\Events\CardDeleted;
use App\Events\CardDescriptionUpdated;
use App\Events\CardNameUpdated;
use App\Http\Controllers\Controller;
use App\Models\Card;
use App\Models\ListBoard;
use App\Models\User;
use App\Notifications\CardCompletedNotification;
use App\Notifications\CardNotification;
use Illuminate\Http\Request;
use Illuminate\Notifications\DatabaseNotification;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Events\CardPositionUpdated;
use App\Events\ColumnPositionUpdated;
use App\Jobs\SendReminderNotification;
use App\Jobs\SendReminderNotificationCard;
use Carbon\Carbon;
use Exception;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;

class CardController extends Controller
{ // app/Http/Controllers/CardController.php
    public function getCardsByList($listId)
    {
        try {
            $cards = Card::where('list_board_id', $listId)
                ->where('is_archived', 0)
                ->withCount('comments')
                ->get();
            return response()->json([
                'status' => true,
                'message' => 'L·∫•y d·ªØ li·ªáu card th√†nh c√¥ng',
                'data' => $cards
            ]);
        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message' => 'C√≥ l·ªói l·∫•y d·ªØ li·ªáu cardcard',
                // 'data'=>$cards
            ]);
        }
    }
    public function store(Request $request)
    {
        // üìå Validate request
        $validator = Validator::make($request->all(), [
            'columnId' => 'required|uuid|exists:list_boards,id',
            'title' => 'required|string|max:255',
            'start_date' => 'nullable|date',
            'end_date' => 'nullable|date',
            'end_time' => 'nullable|date_format:H:i', // Ch·ªâ gi·ªù (HH:mm)
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        // üìå T√≠nh to√°n position m·ªõi (l·∫•y position cao nh·∫•t + 10000)
        $maxPosition = Card::where('list_board_id', $request->columnId)->max('position') ?? 0;
        $newPosition = $maxPosition + 10000;

        // üìå T·∫°o card m·ªõi
        $card = Cache::remember("card_{$request->columnId}_{$request->title}", 10, function () use ($request, $newPosition) {
            $data = [
                'list_board_id' => $request->columnId,
                'position' => $newPosition,
                'title' => $request->title,
            ];

            if ($request->filled('start_date')) {
                $data['start_date'] = $request->start_date;
            }

            if ($request->filled('end_date')) {
                $data['end_date'] = $request->end_date;
            }

            if ($request->filled('end_time')) {
                $data['end_time'] = $request->end_time;
            }

            return Card::create($data);
        });

        // üìå Broadcast event ƒë·ªÉ c·∫≠p nh·∫≠t realtime
        broadcast(new CardCreated($card))->toOthers();

        return response()->json($card, 201);
    }


    // c·∫≠p nh·∫≠t t√™n
    public function updateName($cardId, Request $request)
    {
        $card = Card::find($cardId);
        $oldTitle = $card->title;

        $request->validate([
            'title' => 'required'
        ]);

        if ($oldTitle !== $request->title) {
            $card->update([
                'title' => $request->title
            ]);

            broadcast(new CardNameUpdated($card, $oldTitle))->toOthers();

            return response()->json([
                'status' => true,
                'data' => $card,
            ]);
        }
    }
    // c·∫≠p nh·∫≠t m√¥ t·∫£
    public function updateDescription($cardId, Request $request)
    {
        $card = Card::findOrFail($cardId);

        $request->validate([
            'description' => 'nullable|string|max:1000'
        ]);

        $description = $request->input('description');

        // Ki·ªÉm tra n·∫øu description l√† null, r·ªóng, ho·∫∑c ch·ªâ ch·ª©a <p><br></p>
        if (is_null($description) || $description === "" || trim(strip_tags($description)) === "") {
            $card->update(['description' => null]);
            $message = 'M√¥ t·∫£ ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng';
        } else {
            // Lo·∫°i b·ªè c√°c th·∫ª <p><br></p> n·∫øu ch·ªâ ch·ª©a ch√∫ng
            $cleanDescription = trim(strip_tags($description, '<p><br>'));
            if ($cleanDescription === "<p><br></p>" || $cleanDescription === "") {
                $card->update(['description' => null]);
                $message = 'M√¥ t·∫£ ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng';
            } else {
                $card->update(['description' => $description]);
                $message = 'M√¥ t·∫£ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng';
            }
        }

        broadcast(new CardDescriptionUpdated($card))->toOthers();

        return response()->json([
            'message' => $message,
            'card' => $card
        ]);
    }

    // th√™m ng∆∞·ªùi d√πng v√†o th·∫ª
    public function addMemberByEmail(Request $request, $cardId)
    {
        $user = User::where('email', $request->email)->first();
        $cards = Card::findOrFail($cardId);
        // $userIds = $cards->users->pluck('id')->toArray();
        $userName = auth()->user()?->user_name ?? 'ai ƒë√≥';
        $request->validate([
            'email' => 'required|email'
        ]);
        // N·∫øu email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng, tr·∫£ v·ªÅ l·ªói
        if (!$user) {
            return response()->json(['message' => 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng'], 404);
        }
        $cards = Card::findOrFail($cardId);
        // $userByCard = $cards->users->pluck('id')->toArray();
        // Ki·ªÉm tra n·∫øu user ƒë√£ c√≥ trong th·∫ª ch∆∞a
        if (!$cards->members()->wherePivot('users.id', $user->id)->exists()) {
            $cards->members()->attach($user->id);

            activity()
                ->causedBy(auth()->user())
                ->performedOn($cards)
                ->event('addmember')
                ->withProperties([
                    'card_id' => $cards->id,
                    'card_title' => $cards->title,
                    'added_user' => $user->id,
                    'added_user_email' => $user->email,
                    'board_id' => $card->list->board->id, // th√™m d√≤ng n√†y
                    'board_name' => $card->list->board->name,
                ])
                ->log("{$userName} ƒë√£ th√™m  {$user->user_name} v√†o th·∫ª.");
            // broadcast(new ActivityEvent($activity, $cardId, $userByCard));
            // // G·ª≠i th√¥ng b√°o
            // $user->notify(new CardNotification('add_member', $cards));
            // return response()->json(['message' => 'ƒê√£ th√™m th√†nh vi√™n v√†o th·∫ª v√† g·ª≠i th√¥ng b√°o'], 200);
        } else {
            return response()->json(['message' => 'Ng∆∞·ªùi d√πng ƒë√£ c√≥ trong th·∫ª'], 400);
        }
    }
    // th√†nh vi√™n kh·ªèi card
    public function removeMember($cardId, $userID)
    {
        $card = Card::find($cardId);
        $user = User::find($userID);
        $user_name = auth()->user()?->user_name ?? 'ai ƒë√≥';

        // Ki·ªÉm tra xem user c√≥ trong th·∫ª kh√¥ng
        if (!$card->members()->where('user_id', $user->id)->exists()) {
            return response()->json([
                'message' => 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong th·∫ª n√†y'
            ], 404);
        }
        // X√≥a user kh·ªèi th·∫ª
        $card->members()->detach($user->id);
        // Ki·ªÉm tra xem ng∆∞·ªùi th·ª±c hi·ªán c√≥ ph·∫£i l√† ch√≠nh user b·ªã x√≥a kh√¥ng

        activity()
            ->causedBy(auth()->user())
            ->performedOn($card)
            ->event('remove_member')
            ->withProperties([
                'card_id' => $card->id,
                'card_title' => $card->title,
                'removed_user_id' => $user->id,
                'removed_user_email' => $user->email,
                'board_id' => $card->list->board->id, // th√™m d√≤ng n√†y
                'board_name' => $card->list->board->name,

            ])
            ->log(
                "{$user_name} ƒë√£ x√≥a {$user->user_name} kh·ªèi th·∫ª."
            );


        return response()->json([
            'message' => 'ƒê√£ x√≥a th√†nh vi√™n kh·ªèi th·∫ª th√†nh c√¥ng',
            'status' => true,

        ]);
    }
    public function updateDates(Request $request, $cardId)
    {
        $card = Card::findOrFail($cardId);
        $user_name = auth()->user()->full_name ?? 'ai ƒë√≥';

        // Validate c√°c tr∆∞·ªùng nh·∫≠p
        $request->validate([
            'start_date' => 'nullable|date_format:Y-m-d',
            'end_date' => 'nullable|date_format:Y-m-d|after_or_equal:start_date',
            'end_time' => 'nullable|date_format:H:i',
            'reminder' => 'nullable|string', // Ki·ªÉm tra reminder d∆∞·ªõi d·∫°ng chu·ªói ƒë·ªÉ x·ª≠ l√Ω linh ho·∫°t
        ]);

        $changes = [];

        // C·∫≠p nh·∫≠t start_date n·∫øu thay ƒë·ªïi
        if ($request->has('start_date') && $request->start_date !== $card->start_date) {
            $card->start_date = $request->start_date;
        }

        // C·∫≠p nh·∫≠t end_date n·∫øu thay ƒë·ªïi
        if ($request->has('end_date') && $request->end_date !== $card->end_date) {
            $changes['end_date'] = $request->end_date;
        }

        // C·∫≠p nh·∫≠t end_time n·∫øu thay ƒë·ªïi
        if ($request->has('end_time') && $request->end_time !== $card->end_time) {
            $changes['end_time'] = $request->end_time;
        }
        if ($request->has('reminder') && $request->reminder !== $card->reminder) {
            $card->reminder = $request->reminder;
        }



        // C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o database
        $card->update(array_merge($changes, ['start_date' => $card->start_date]));

        // N·∫øu c√≥ s·ª± thay ƒë·ªïi, ghi log v√† g·ª≠i th√¥ng b√°o
        if (!empty($changes)) {
            $logMessage = "{$user_name} ƒë√£ chuy·ªÉn ";

            if (isset($changes['end_date']) && isset($changes['end_time'])) {
                $logMessage .= "ng√†y h·∫øt h·∫°n th·∫ª n√†y sang {$changes['end_date']} l√∫c {$changes['end_time']}, ";
            } else if (isset($changes['end_date'])) {
                $logMessage .= "ng√†y h·∫øt h·∫°n th·∫ª n√†y sang {$changes['end_date']}, ";
            } else if (isset($changes['end_time'])) {
                $logMessage .= "gi·ªù k·∫øt th√∫c sang {$changes['end_time']}, ";
            }

            // Lo·∫°i b·ªè d·∫•u ph·∫©y cu·ªëi c√πng
            $logMessage = rtrim($logMessage, ', ');

            // Ghi log ho·∫°t ƒë·ªông
            activity()
                ->causedBy(auth()->user())
                ->performedOn($card)
                ->event('updated_datetime')
                ->withProperties(array_merge([
                    'card_title' => $card->title,
                    'board_id' => $card->list->board->id, // th√™m d√≤ng n√†y
                    'board_name' => $card->list->board->name,
                    'card_id' => $card->id
                ], $changes))
                ->log($logMessage);

            // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng li√™n quan
            // $users = $card->users()->where('id', '!=', auth()->id())->get();
            // foreach ($users as $user) {
            //     $user->notify(new CardNotification('update_datetime', $card, [], $user_name));
            // }

            Log::info("üìå Job ƒë∆∞·ª£c l√™n l·ªãch ch·∫°y v√†o: " . Carbon::parse($card->reminder));

        }
        if (!empty($card->reminder) && strtotime($card->reminder)) {
            // dispatch(new SendReminderNotification($card))->delay(now()->addMinutes(1));

            dispatch(new SendReminderNotificationCard($card))->delay(Carbon::parse($card->reminder));
        }


        return response()->json([
            'message' => 'C·∫≠p nh·∫≠t ng√†y, gi·ªù v√† nh·∫Øc nh·ªü th√†nh c√¥ng!',
            'data' => $card,
        ]);
    }




    public function removeDates($cardId)
    {
        $card = Card::findOrFail($cardId);
        $card->start_date = null;
        $card->end_date = null;
        $card->end_time = null;
        $card->reminder = null;
        $card->save();

        return response()->json([
            'message' => 'ƒê√£ x√≥a ng√†y b·∫Øt ƒë·∫ßu & ng√†y k·∫øt th√∫c kh·ªèi th·∫ª!',
            'data' => $card,

        ]);
    }
    // l·∫•y l·ªãch s·ª≠ ho·∫°t ƒë·ªông
    public function getCardHistory($cardId)
    {
        $card = Card::with([
            'activities' => function ($query) {
                $query->orderByDesc('created_at'); // S·∫Øp x·∫øp b·∫£n ghi m·ªõi nh·∫•t l√™n ƒë·∫ßu
            }
        ])->find($cardId);

        if (!$card) {
            return response()->json(['message' => 'Card kh√¥ng t·ªìn t·∫°i'], 404);
        }

        return response()->json($card->activities);
    }
    public function getUserNotifications($userId)
    {
        $notifications = DatabaseNotification::where('notifiable_id', $userId)
            ->orderBy('created_at', 'desc')
            ->get();

        return response()->json([
            'notifications' => $notifications
        ]);
    }

    public function show($id)
    {
        $card = Card::with([
            'list.board',
            'checklists.items',
            'labels',
            'members',
            'attachments',
            'comments'
        ])->findOrFail($id);
        return response()->json([
            'id' => $card->id,
            'title' => $card->title,
            'is_completed' => $card->is_completed,
            'description' => $card->description ?? '',
            'listName' => $card->list->name ?? '', // T√™n danh s√°ch
            'boardName' => $card->list->board->name ?? '', // T√™n board
            'board_id' => $card->list->board->id ?? '',
            'list_id' => $card->list->id ?? '',
            'position' => $card->position ?? '',
            'is_archived' => $card->is_archived ?? '',
            'checklists' => $card->checklists, // Danh s√°ch checklist
            'labels' => $card->labels, // Nh√£n
            'members' => $card->members, // Th√†nh vi√™n
            'attachments' => $card->attachments, // T·ªáp ƒë√≠nh k√®m
            'comments' => $card->comments, // Nh·∫≠n x√©t
        ]);
    }


    //// L∆∞u tr·ªØ , kh√¥i ph·ª•c th·∫ª, x√≥a vƒ©nh vi·ªÖn
    public function toggleArchive($id)
    {
        try {
            // T√¨m card theo ID, n·∫øu kh√¥ng c√≥ s·∫Ω n√©m l·ªói 404
            $card = Card::findOrFail($id);

            // Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i l∆∞u tr·ªØ
            $card->is_archived = !$card->is_archived;
            $card->save();

            broadcast(new CardArchiveToggled($card))->toOthers();

            return response()->json([
                'message' => 'Card archive status updated successfully',
                'is_archived' => $card->is_archived,
            ], 200);
        } catch (ModelNotFoundException $e) {
            return response()->json([
                'message' => 'Card not found',
            ], 404);
        } catch (Exception $e) {
            return response()->json([
                'message' => 'An error occurred while updating the card',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    public function getArchivedCardsByBoard($boardId)
    {
        try {
            // L·∫•y danh s√°ch ID thu·ªôc boardId
            $listIds = ListBoard::where('board_id', $boardId)->pluck('id');

            // L·∫•y c√°c th·∫ª ƒë√£ l∆∞u tr·ªØ trong danh s√°ch ƒë√≥
            $archivedCards = Card::whereIn('list_board_id', $listIds)
                ->where('is_archived', 1)
                ->get();

            return response()->json([
                'success' => true,
                'message' => 'L·∫•y danh s√°ch th·∫ª ƒë√£ l∆∞u tr·ªØ th√†nh c√¥ng!',
                'data' => $archivedCards
            ]);
        } catch (\Throwable $th) {
            return response()->json([
                'success' => false,
                'message' => 'C√≥ l·ªói x·∫£y ra!'
            ], 500);
        }
    }

    public function delete($id)
    {
        try {
            // T√¨m card theo ID, n·∫øu kh√¥ng c√≥ s·∫Ω n√©m l·ªói 404
            $card = Card::findOrFail($id);
            $boardId = $card->list->board_id;

            // X√≥a card
            $card->delete();

            broadcast(new CardDeleted($id, $boardId))->toOthers();

            return response()->json([
                'message' => 'Card deleted successfully',
            ], 200);
        } catch (ModelNotFoundException $e) {
            return response()->json([
                'message' => 'Card not found',
            ], 404);
        } catch (Exception $e) {
            return response()->json([
                'message' => 'An error occurred while deleting the card',
                'error' => $e->getMessage(),
            ], 500);
        }
    }
    public function getSchedule($cardId)
    {
        $card = Card::findOrFail($cardId);
        return response()->json([
            'start_date' => $card->start_date,
            'end_date' => $card->end_date,
            'end_time' => $card->end_time,
            'reminder' => $card->reminder,
        ]);
    }

    public function toggleComplete(Request $request, $id)
    {
        $card = Card::findOrFail($id);

        $card->is_completed = !$card->is_completed; // ƒê·∫£o tr·∫°ng th√°i
        $card->save();
        $users = $card->members; // L·∫•y danh s√°ch th√†nh vi√™n trong card
        $currentUser = Auth::user();
        if (!$currentUser instanceof User) {
            return; // Ho·∫∑c x·ª≠ l√Ω l·ªói, v√¨ n·∫øu null th√¨ kh√¥ng th·ªÉ ti·∫øp t·ª•c
        }


        broadcast(new CardCompletedToggled($card))->toOthers();

        // L·∫•y ng∆∞·ªùi th·ª±c hi·ªán toggle

        foreach ($users as $user) {
            if ($user->id !== $currentUser->id) { // Tr·ª´ ch√≠nh ng∆∞·ªùi th·ª±c hi·ªán toggle
                $user->notify(new CardCompletedNotification($card, $currentUser)); // Truy·ªÅn ƒë√∫ng s·ªë l∆∞·ª£ng tham s·ªë
            }
        }


        return response()->json([
            'success' => true,
            'message' => 'Card completion status updated successfully',
            'card' => $card
        ]);
    }


    public function copyCard(Request $request)
    {
        // Validate request
        $validator = Validator::make($request->all(), [
            'card_id' => 'exists:cards,id',
            'title' => 'string|max:255',
            'board_id' => 'exists:boards,id',
            'list_board_id' => 'required|exists:list_boards,id',
            'position' => 'required|numeric|min:0',
            'keep_checklist' => 'boolean',
            'keep_labels' => 'boolean',
            'keep_members' => 'boolean',
            'keep_attachments' => 'boolean',
            'keep_comments' => 'boolean',

            // Th√™m validation cho members
            'members' => 'array',
            'members.*' => 'exists:users,id',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        DB::beginTransaction();

        try {
            $originalCard = Card::with(['checklists.items', 'labels', 'members', 'attachments', 'comments'])
                ->findOrFail($request->card_id);

            // T·∫°o th·∫ª m·ªõi
            $newCard = Card::create([
                'title' => $request->title,
                'description' => $originalCard->description,
                'position' => $request->position,
                'start_date' => $originalCard->start_date,
                'end_date' => $originalCard->end_date,
                'end_time' => $originalCard->end_time,
                'is_completed' => $originalCard->is_completed,
                'is_archived' => false,
                'board_id' => $request->board_id,
                'list_board_id' => $request->list_board_id,
            ]);

            // C·∫≠p nh·∫≠t v·ªã tr√≠ c√°c th·∫ª kh√°c trong list
            Card::where('list_board_id', $request->list_board_id)
                ->where('id', '!=', $newCard->id)
                ->where('position', '>=', $request->position)
                ->increment('position');

            // Copy checklist
            if ($request->keep_checklist) {
                foreach ($originalCard->checklists as $checklist) {
                    $newChecklist = $checklist->replicate();
                    $newChecklist->card_id = $newCard->id;
                    $newChecklist->save();

                    foreach ($checklist->items as $item) {
                        $newItem = $item->replicate();
                        $newItem->checklist_id = $newChecklist->id;
                        $newItem->save();
                    }
                }
            }

            // Copy labels
            if ($request->keep_labels) {
                $newCard->labels()->sync($originalCard->labels->pluck('id'));
            }

            // Copy members
            if ($request->keep_members) {
                // L·∫•y danh s√°ch t·∫•t c·∫£ th√†nh vi√™n c·ªßa b·∫£ng ƒë√≠ch
                $boardMembers = DB::table('board_members')
                    ->where('board_id', $request->board_id)
                    ->pluck('user_id');

                // L·ªçc ch·ªâ gi·ªØ nh·ªØng th√†nh vi√™n t·ª´ th·∫ª g·ªëc c≈©ng c√≥ trong b·∫£ng ƒë√≠ch
                $filteredMembers = $originalCard->members()
                    ->whereIn('id', $boardMembers)
                    ->pluck('id');

                // ƒê·ªìng b·ªô c√°c th√†nh vi√™n ƒë√£ l·ªçc v√†o th·∫ª m·ªõi
                $newCard->members()->sync($filteredMembers);
            }
            // N·∫øu client mu·ªën g·ª≠i danh s√°ch th√†nh vi√™n ƒë√£ l·ªçc
            elseif ($request->has('members') && is_array($request->members)) {
                $newCard->members()->sync($request->members);
            }

            // Copy attachments
            if ($request->keep_attachments) {
                foreach ($originalCard->attachments as $attachment) {
                    $newAttachment = $attachment->replicate();
                    $newAttachment->card_id = $newCard->id;

                    // ƒê·ªïi t√™n file tr√°nh tr√πng
                    $newAttachment->file_name = Str::uuid() . '_' . $attachment->file_name;
                    $newAttachment->file_name_defaut = $attachment->file_name_defaut;

                    $newAttachment->save();
                }
            }

            // Copy comments
            if ($request->keep_comments) {
                foreach ($originalCard->comments as $comment) {
                    $newComment = $comment->replicate();
                    $newComment->card_id = $newCard->id;
                    $newComment->save();
                }
            }

            DB::commit();
            $createdCard = Card::with(['list.board', 'checklists.items', 'labels', 'members', 'attachments', 'comments'])
                ->findOrFail($newCard->id);

            broadcast(new CardCopied($createdCard))->toOthers();


            return response()->json([
                'message' => 'Card copied successfully',
                'card' => $createdCard
            ], 201);

        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json(['message' => 'Failed to copy card', 'error' => $e->getMessage()], 500);
        }
    }

    public function moveCard(Request $request)
    {
        // Validate request
        $validator = Validator::make($request->all(), [
            'card_id' => 'required|exists:cards,id',
            'board_id' => 'required|exists:boards,id',
            'list_board_id' => 'required|exists:list_boards,id',
            'position' => 'required|numeric|min:0',
            // Th√™m validation cho members
            'members' => 'array',
            'members.*' => 'exists:users,id', // Th√™m validation cho tr∆∞·ªùng members
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        DB::beginTransaction();

        try {
            $card = Card::with('listBoard.board')->findOrFail($request->card_id);
            $oldListBoardId = $card->list_board_id;
            $oldPosition = $card->position;
            $newListBoardId = $request->list_board_id;
            $newPosition = $request->position;

            $oldBoardId = optional($card->listBoard->board)->id;

            // N·∫øu di chuy·ªÉn sang board kh√°c, ki·ªÉm tra quy·ªÅn truy c·∫≠p v√†o board ƒë√≠ch
            if ($oldBoardId != $request->board_id) {
                $userId = auth()->id();

                // Ki·ªÉm tra quy·ªÅn
                $userCanAccessSourceBoard = DB::table('board_members')
                    ->where('board_id', $oldBoardId)
                    ->where('user_id', $userId)
                    ->exists();

                $userCanAccessTargetBoard = DB::table('board_members')
                    ->where('board_id', $request->board_id)
                    ->where('user_id', $userId)
                    ->exists();

                if (!$userCanAccessSourceBoard || !$userCanAccessTargetBoard) {
                    return response()->json(['message' => 'You do not have permission to move this card between boards'], 403);
                }
            }


            // C·∫≠p nh·∫≠t v·ªã tr√≠ c√°c th·∫ª kh√°c trong list c≈© (gi·∫£m position)
            // if ($oldListBoardId == $newListBoardId) {
            //     // Di chuy·ªÉn trong c√πng m·ªôt list
            //     if ($oldPosition < $newPosition) {
            //         // Di chuy·ªÉn xu·ªëng d∆∞·ªõi: c·∫≠p nh·∫≠t c√°c th·∫ª gi·ªØa v·ªã tr√≠ c≈© v√† v·ªã tr√≠ m·ªõi
            //         Card::where('list_board_id', $oldListBoardId)
            //             ->where('id', '!=', $card->id)
            //             ->where('position', '>', $oldPosition)
            //             ->where('position', '<=', $newPosition)
            //             ->decrement('position');
            //     } else if ($oldPosition > $newPosition) {
            //         // Di chuy·ªÉn l√™n tr√™n: c·∫≠p nh·∫≠t c√°c th·∫ª gi·ªØa v·ªã tr√≠ m·ªõi v√† v·ªã tr√≠ c≈©
            //         Card::where('list_board_id', $oldListBoardId)
            //             ->where('id', '!=', $card->id)
            //             ->where('position', '>=', $newPosition)
            //             ->where('position', '<', $oldPosition)
            //             ->increment('position');
            //     }
            // } else {
            //     // Di chuy·ªÉn gi·ªØa c√°c list kh√°c nhau
            //     // C·∫≠p nh·∫≠t v·ªã tr√≠ c√°c th·∫ª trong list c≈©
            //     Card::where('list_board_id', $oldListBoardId)
            //         ->where('position', '>', $oldPosition)
            //         ->decrement('position');

            //     // C·∫≠p nh·∫≠t v·ªã tr√≠ c√°c th·∫ª trong list m·ªõi
            //     Card::where('list_board_id', $newListBoardId)
            //         ->where('position', '>=', $newPosition)
            //         ->increment('position');
            // 

            // C·∫≠p nh·∫≠t th√¥ng tin th·∫ª hi·ªán t·∫°i
            $card->update([
                'board_id' => $request->board_id,
                'list_board_id' => $newListBoardId,
                'position' => $newPosition,
            ]);

            // N·∫øu di chuy·ªÉn qua board kh√°c, x·ª≠ l√Ω c√°c th√†nh ph·∫ßn li√™n quan
            if ($oldBoardId != $request->board_id) {
                // 1. X·ª≠ l√Ω labels: x√≥a c√°c label kh√¥ng t·ªìn t·∫°i trong board m·ªõi
                $targetBoardLabels = DB::table('labels')
                    ->where('board_id', $request->board_id)
                    ->pluck('id');

                // Ch·ªâ gi·ªØ l·∫°i labels thu·ªôc board m·ªõi
                // $card->labels()->whereNotIn('id', $targetBoardLabels)->detach();

                // 2. X·ª≠ l√Ω members
                $targetBoardMemberIds = DB::table('board_members')
                    ->where('board_id', $request->board_id)
                    ->pluck('user_id');

                // L·ªçc l·∫°i c√°c member hi·ªán t·∫°i c·ªßa th·∫ª c√≥ trong board ƒë√≠ch
                $filteredMembers = $card->members()
                    ->whereIn('id', $targetBoardMemberIds)
                    ->pluck('id');

                // G√°n l·∫°i danh s√°ch members cho th·∫ª
                $card->members()->sync($filteredMembers);
                // $card->unsetRelation('members'); // <<<<< D√≤ng n√†y ƒë·ªÉ clear cache quan h·ªá

            }

            DB::commit();

            // L·∫•y th·∫ª ƒë√£ c·∫≠p nh·∫≠t v·ªõi c√°c th√¥ng tin li√™n quan
            $card->load(['checklists.items', 'labels', 'members', 'attachments', 'comments']);

            broadcast(new CardMoved($card, $oldListBoardId, $newListBoardId))->toOthers();

            return response()->json([
                'message' => 'Card moved successfully',
                'card' => $card,
                'old_list_id' => $oldListBoardId,
                'new_list_id' => $newListBoardId
            ], 200);

        } catch (\Exception $e) {
            DB::rollBack();
            \Log::error('Failed to move card: ' . $e->getMessage());
            \Log::error($e->getTraceAsString());
            return response()->json(['message' => 'Failed to move card', 'error' => $e->getMessage()], 500);
        }
    }

    public function getCardsByUserBoards($id)
    {
        $user = User::findOrFail($id);

        $boards = $user->boards()->with([
            'workspace',
            'lists' => function ($q) use ($id) {
                $q->where('closed', false) // <-- Ch·ªâ l·∫•y list ch∆∞a ƒë√≥ng
                    ->with([
                        'cards' => function ($q) use ($id) {
                            $q->where('is_archived', false)
                                ->whereHas('users', fn($q) => $q->where('user_id', $id)) // <-- Ch·ªâ card user c√≥ tham gia
                                ->with('labels');
                        }
                    ]);
            }
        ])->get();

        // Format l·∫°i d·ªØ li·ªáu ƒë·ªÉ tr·∫£ v·ªÅ danh s√°ch th·∫ª v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
        $cards = [];

        foreach ($boards as $board) {
            foreach ($board->lists as $list) {
                foreach ($list->cards as $card) {
                    $cards[] = [
                        'id' => $card->id,
                        'title' => $card->title,
                        'end_date' => $card->end_date,
                        'list_name' => $list->name,
                        'list_board_id' => $list->id,
                        'is_completed' => $card->is_completed,
                        'labels' => $card->labels->map(fn($label) => ['name' => $label->name, 'color' => $label->color]),
                        'board_id' => $board->id,
                        'board_name' => $board->name,
                        'board_thumbnail' => $board->thumbnail,
                        'workspace_name' => $board->workspace->name ?? '',
                        'created_at' => $card->created_at,
                    ];
                }
            }
        }

        return response()->json([
            'cards' => $cards,
        ]);
    }


}
