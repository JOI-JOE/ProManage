<?php

namespace App\Http\Controllers\api;

use App\Events\ActivityEvent;
use App\Events\CardArchiveToggled;
use App\Events\CardCreate;
use App\Events\CardCreated;
use App\Events\CardDeleted;
use App\Events\CardDescriptionUpdated;
use App\Events\CardNameUpdated;
use App\Http\Controllers\Controller;
use App\Models\Card;
use App\Models\ListBoard;
use App\Models\User;
use App\Notifications\CardNotification;
use Illuminate\Http\Request;
use Illuminate\Notifications\DatabaseNotification;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Events\CardPositionUpdated;
use App\Events\ColumnPositionUpdated;
use App\Jobs\SendReminderNotification;
use App\Jobs\SendReminderNotificationCard;
use Carbon\Carbon;
use Exception;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Validator;

class CardController extends Controller
{ // app/Http/Controllers/CardController.php
    public function getCardsByList($listId)
    {
        try {
            $cards = Card::where('list_board_id', $listId)
                ->where('is_archived', 0)
                ->withCount('comments')
                ->get();
            return response()->json([
                'status' => true,
                'message' => 'L·∫•y d·ªØ li·ªáu card th√†nh c√¥ng',
                'data' => $cards
            ]);
        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message' => 'C√≥ l·ªói l·∫•y d·ªØ li·ªáu cardcard',
                // 'data'=>$cards
            ]);
        }
    }
    public function store(Request $request)
    {
        // üìå Validate request
        $validator = Validator::make($request->all(), [
            'columnId' => 'required|uuid|exists:list_boards,id',
            'position' => 'required|numeric',
            'title' => 'required|string|max:255',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        // üìå T·∫°o card m·ªõi
        $card = Cache::remember("card_{$request->columnId}_{$request->title}", 10, function () use ($request) {
            return Card::create([
                'list_board_id' => $request->columnId,
                'position' => $request->position,
                'title' => $request->title,
            ]);
        });

        // üìå Broadcast event ƒë·ªÉ c·∫≠p nh·∫≠t realtime
        broadcast(new CardCreated($card))->toOthers();

        return response()->json($card, 201);
    }
    // c·∫≠p nh·∫≠t t√™n
    public function updateName($cardId, Request $request)
    {
        $card = Card::find($cardId);
        $oldTitle = $card->title;

        $request->validate([
            'title' => 'required'
        ]);

        if ($oldTitle !== $request->title) {
            $card->update([
                'title' => $request->title
            ]);

            broadcast(new CardNameUpdated($card, $oldTitle))->toOthers();

            return response()->json([
                'status' => true,
                'data' => $card,
            ]);
        }
    }
    // c·∫≠p nh·∫≠t m√¥ t·∫£
    public function updateDescription($cardId, Request $request)
    {
        $card = Card::findOrFail($cardId);

        $request->validate([
            'description' => 'nullable|string|max:1000'
        ]);

        $description = $request->input('description');

        // Ki·ªÉm tra n·∫øu description l√† null, r·ªóng, ho·∫∑c ch·ªâ ch·ª©a <p><br></p>
        if (is_null($description) || $description === "" || trim(strip_tags($description)) === "") {
            $card->update(['description' => null]);
            $message = 'M√¥ t·∫£ ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng';
        } else {
            // Lo·∫°i b·ªè c√°c th·∫ª <p><br></p> n·∫øu ch·ªâ ch·ª©a ch√∫ng
            $cleanDescription = trim(strip_tags($description, '<p><br>'));
            if ($cleanDescription === "<p><br></p>" || $cleanDescription === "") {
                $card->update(['description' => null]);
                $message = 'M√¥ t·∫£ ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng';
            } else {
                $card->update(['description' => $description]);
                $message = 'M√¥ t·∫£ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng';
            }
        }

        broadcast(new CardDescriptionUpdated($card))->toOthers();

        return response()->json([
            'message' => $message,
            'card' => $card
        ]);
    }

    // th√™m ng∆∞·ªùi d√πng v√†o th·∫ª
    public function addMemberByEmail(Request $request, $cardId)
    {
        $user = User::where('email', $request->email)->first();
        $cards = Card::findOrFail($cardId);
        // $userIds = $cards->users->pluck('id')->toArray();
        $userName = auth()->user()?->user_name ?? 'ai ƒë√≥';
        $request->validate([
            'email' => 'required|email'
        ]);
        // N·∫øu email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng, tr·∫£ v·ªÅ l·ªói
        if (!$user) {
            return response()->json(['message' => 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng'], 404);
        }
        $cards = Card::findOrFail($cardId);
        // $userByCard = $cards->users->pluck('id')->toArray();
        // Ki·ªÉm tra n·∫øu user ƒë√£ c√≥ trong th·∫ª ch∆∞a
        if (!$cards->members()->wherePivot('users.id', $user->id)->exists()) {
            $cards->members()->attach($user->id);

            activity()
                ->causedBy(auth()->user())
                ->performedOn($cards)
                ->event('addmember')
                ->withProperties([
                    'card_id' => $cards->id,
                    'added_user' => $user->id,
                    'added_user_email' => $user->email,
                ])
                ->log("{$userName} ƒë√£ th√™m  {$user->user_name} v√†o th·∫ª.");
            // broadcast(new ActivityEvent($activity, $cardId, $userByCard));
            // // G·ª≠i th√¥ng b√°o
            // $user->notify(new CardNotification('add_member', $cards));
            // return response()->json(['message' => 'ƒê√£ th√™m th√†nh vi√™n v√†o th·∫ª v√† g·ª≠i th√¥ng b√°o'], 200);
        } else {
            return response()->json(['message' => 'Ng∆∞·ªùi d√πng ƒë√£ c√≥ trong th·∫ª'], 400);
        }
    }
    // th√†nh vi√™n kh·ªèi card
    public function removeMember($cardId, $userID)
    {
        $card = Card::find($cardId);
        $user = User::find($userID);
        $user_name = auth()->user()?->user_name ?? 'ai ƒë√≥';

        // Ki·ªÉm tra xem user c√≥ trong th·∫ª kh√¥ng
        if (!$card->members()->where('user_id', $user->id)->exists()) {
            return response()->json([
                'message' => 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong th·∫ª n√†y'
            ], 404);
        }
        // X√≥a user kh·ªèi th·∫ª
        $card->members()->detach($user->id);
        // Ki·ªÉm tra xem ng∆∞·ªùi th·ª±c hi·ªán c√≥ ph·∫£i l√† ch√≠nh user b·ªã x√≥a kh√¥ng

        activity()
            ->causedBy(auth()->user())
            ->performedOn($card)
            ->event('remove_member')
            ->withProperties([
                'card_id' => $card->id,
                'removed_user_id' => $user->id,
                'removed_user_email' => $user->email,

            ])
            ->log(
                "{$user_name} ƒë√£ x√≥a {$user->user_name} kh·ªèi th·∫ª."
            );


        return response()->json([
            'message' => 'ƒê√£ x√≥a th√†nh vi√™n kh·ªèi th·∫ª th√†nh c√¥ng',
            'status' => true,

        ]);
    }
    public function updateDates(Request $request, $cardId)
    {
        $card = Card::findOrFail($cardId);
        $user_name = auth()->user()->user_name ?? 'ai ƒë√≥';

        // Validate c√°c tr∆∞·ªùng nh·∫≠p
        $request->validate([
            'start_date' => 'nullable|date_format:Y-m-d',
            'end_date'   => 'nullable|date_format:Y-m-d|after_or_equal:start_date',
            'end_time'   => 'nullable|date_format:H:i',
            'reminder'   => 'nullable|string', // Ki·ªÉm tra reminder d∆∞·ªõi d·∫°ng chu·ªói ƒë·ªÉ x·ª≠ l√Ω linh ho·∫°t
        ]);

        $changes = [];

        // C·∫≠p nh·∫≠t start_date n·∫øu thay ƒë·ªïi
        if ($request->has('start_date') && $request->start_date !== $card->start_date) {
            $card->start_date = $request->start_date;
        }

        // C·∫≠p nh·∫≠t end_date n·∫øu thay ƒë·ªïi
        if ($request->has('end_date') && $request->end_date !== $card->end_date) {
            $changes['end_date'] = $request->end_date;
        }

        // C·∫≠p nh·∫≠t end_time n·∫øu thay ƒë·ªïi
        if ($request->has('end_time') && $request->end_time !== $card->end_time) {
            $changes['end_time'] = $request->end_time;
        }
        if ($request->has('reminder') && $request->reminder !== $card->reminder) {
            $card->reminder = $request->reminder;
        }



        // C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o database
        $card->update(array_merge($changes, ['start_date' => $card->start_date]));

        // N·∫øu c√≥ s·ª± thay ƒë·ªïi, ghi log v√† g·ª≠i th√¥ng b√°o
        if (!empty($changes)) {
            $logMessage = "{$user_name} ƒë√£ chuy·ªÉn ";

            if (isset($changes['end_date']) && isset($changes['end_time'])) {
                $logMessage .= "ng√†y h·∫øt h·∫°n th·∫ª n√†y sang {$changes['end_date']} l√∫c {$changes['end_time']}, ";
            } else if (isset($changes['end_date'])) {
                $logMessage .= "ng√†y h·∫øt h·∫°n th·∫ª n√†y sang {$changes['end_date']}, ";
            } else if (isset($changes['end_time'])) {
                $logMessage .= "gi·ªù k·∫øt th√∫c sang {$changes['end_time']}, ";
            }

            // Lo·∫°i b·ªè d·∫•u ph·∫©y cu·ªëi c√πng
            $logMessage = rtrim($logMessage, ', ');

            // Ghi log ho·∫°t ƒë·ªông
            activity()
                ->causedBy(auth()->user())
                ->performedOn($card)
                ->event('updated_datetime')
                ->withProperties(array_merge(['card_title' => $card->title], $changes))
                ->log($logMessage);

            // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng li√™n quan
            // $users = $card->users()->where('id', '!=', auth()->id())->get();
            // foreach ($users as $user) {
            //     $user->notify(new CardNotification('update_datetime', $card, [], $user_name));
            // }

            Log::info("üìå Job ƒë∆∞·ª£c l√™n l·ªãch ch·∫°y v√†o: " . Carbon::parse($card->reminder));

        }
        if (!empty($card->reminder) && strtotime($card->reminder)) {
            // dispatch(new SendReminderNotification($card))->delay(now()->addMinutes(1));

            dispatch(new SendReminderNotificationCard($card))->delay(Carbon::parse($card->reminder));
        }


        return response()->json([
            'message' => 'C·∫≠p nh·∫≠t ng√†y, gi·ªù v√† nh·∫Øc nh·ªü th√†nh c√¥ng!',
            'data' => $card,
        ]);
    }




    public function removeDates($cardId)
    {
        $card = Card::findOrFail($cardId);
        $card->start_date = null;
        $card->end_date = null;
        $card->end_time = null;
        $card->save();

        return response()->json([
            'message' => 'ƒê√£ x√≥a ng√†y b·∫Øt ƒë·∫ßu & ng√†y k·∫øt th√∫c kh·ªèi th·∫ª!',
            'data' => $card,

        ]);
    }
    // l·∫•y l·ªãch s·ª≠ ho·∫°t ƒë·ªông
    public function getCardHistory($cardId)
    {
        $card = Card::with([
            'activities' => function ($query) {
                $query->orderByDesc('created_at'); // S·∫Øp x·∫øp b·∫£n ghi m·ªõi nh·∫•t l√™n ƒë·∫ßu
            }
        ])->find($cardId);

        if (!$card) {
            return response()->json(['message' => 'Card kh√¥ng t·ªìn t·∫°i'], 404);
        }

        return response()->json($card->activities);
    }
    public function getUserNotifications($userId)
    {
        $notifications = DatabaseNotification::where('notifiable_id', $userId)
            ->orderBy('created_at', 'desc')
            ->get();

        return response()->json([
            'notifications' => $notifications
        ]);
    }

    public function show($id)
    {
        $card = Card::with(['list.board', 'checklists.items'])->findOrFail($id);
        return response()->json([
            'id' => $card->id,
            'title' => $card->title,
            'description' => $card->description ?? '',
            'listName' => $card->list->name ?? '', // L·∫•y t√™n danh s√°ch ch·ª©a card
            'boardName' => $card->list->board->name ?? '', // L·∫•y t√™n board

        ]);
    }


    //// L∆∞u tr·ªØ , kh√¥i ph·ª•c th·∫ª, x√≥a vƒ©nh vi·ªÖn
    public function toggleArchive($id)
    {
        try {
            // T√¨m card theo ID, n·∫øu kh√¥ng c√≥ s·∫Ω n√©m l·ªói 404
            $card = Card::findOrFail($id);

            // Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i l∆∞u tr·ªØ
            $card->is_archived = !$card->is_archived;
            $card->save();

            broadcast(new CardArchiveToggled($card))->toOthers();

            return response()->json([
                'message' => 'Card archive status updated successfully',
                'is_archived' => $card->is_archived,
            ], 200);
        } catch (ModelNotFoundException $e) {
            return response()->json([
                'message' => 'Card not found',
            ], 404);
        } catch (Exception $e) {
            return response()->json([
                'message' => 'An error occurred while updating the card',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    public function getArchivedCardsByBoard($boardId)
    {
        try {
            // L·∫•y danh s√°ch ID thu·ªôc boardId
            $listIds = ListBoard::where('board_id', $boardId)->pluck('id');

            // L·∫•y c√°c th·∫ª ƒë√£ l∆∞u tr·ªØ trong danh s√°ch ƒë√≥
            $archivedCards = Card::whereIn('list_board_id', $listIds)
                ->where('is_archived', 1)
                ->get();

            return response()->json([
                'success' => true,
                'message' => 'L·∫•y danh s√°ch th·∫ª ƒë√£ l∆∞u tr·ªØ th√†nh c√¥ng!',
                'data' => $archivedCards
            ]);
        } catch (\Throwable $th) {
            return response()->json([
                'success' => false,
                'message' => 'C√≥ l·ªói x·∫£y ra!'
            ], 500);
        }
    }

    public function delete($id)
    {
        try {
            // T√¨m card theo ID, n·∫øu kh√¥ng c√≥ s·∫Ω n√©m l·ªói 404
            $card = Card::findOrFail($id);
            $boardId = $card->list->board_id;

            // X√≥a card
            $card->delete();

            broadcast(new CardDeleted($id, $boardId))->toOthers();

            return response()->json([
                'message' => 'Card deleted successfully',
            ], 200);
        } catch (ModelNotFoundException $e) {
            return response()->json([
                'message' => 'Card not found',
            ], 404);
        } catch (Exception $e) {
            return response()->json([
                'message' => 'An error occurred while deleting the card',
                'error' => $e->getMessage(),
            ], 500);
        }
    }
    public function getSchedule($cardId)
    {
        $card = Card::findOrFail($cardId);
        return response()->json([
            'start_date' => $card->start_date,
            'end_date'   => $card->end_date,
            'end_time'   => $card->end_time,
            'reminder'   => $card->reminder,
        ]);
    }
    public function getCardsByUserBoards($id)
{
    $user = User::findOrFail($id);

    $boards = $user->boards()->with([
        'workspace',
        'lists' => function ($q) {
            $q->with([
                'cards' => function ($q) {
                    $q->where('is_archived', false)->with('labels');
                }
            ]);
        }
    ])->get();

    // Format l·∫°i d·ªØ li·ªáu ƒë·ªÉ tr·∫£ v·ªÅ danh s√°ch th·∫ª v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
    $cards = [];

    foreach ($boards as $board) {
        foreach ($board->lists as $list) {
            foreach ($list->cards as $card) {
                $cards[] = [
                    'id' => $card->id,
                    'title' => $card->title,
                    'end_date' => $card->end_date,
                    'list_name' => $list->name,
                    'labels' => $card->labels->map(fn($label) => ['name' => $label->name, 'color' => $label->color]),
                    'board_name' => $board->name,
                    'board_thumbnail' => $board->thumbnail,
                    'workspace_name' => $board->workspace->name ?? '',
                ];
            }
        }
    }

    return response()->json([
        'cards' => $cards,
    ]);
}


}
