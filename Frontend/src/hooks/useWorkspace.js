import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  getWorkspacesAll,
  createWorkspace,
  updateWorkspaceInfo,
  getWorkspaceByName,
  getWorkspaceById,
  getBoardMarkedByWorkspace,
  getGuestWorkspace,
  getUserWorkspaces,
  getUserWorkspaces2,
  fetchWorkspacesAll,
  changeType,
  removeMemberWorkspace,
  // checkMemberInWorkspace,
} from "../api/models/workspacesApi";
import { useCallback, useEffect, useId, useRef } from "react";
import echoInstance from "./realtime/useRealtime";

export const usefetchWorkspaces = () => {
  return useQuery({
    queryKey: ["workspaces"],
    queryFn: fetchWorkspacesAll,
    staleTime: 5 * 60 * 1000, // 5 ph√∫t: d·ªØ li·ªáu "t∆∞∆°i" trong 5 ph√∫t
    cacheTime: 10 * 60 * 1000, // 10 ph√∫t: gi·ªØ cache 10 ph√∫t sau khi kh√¥ng d√πng
    refetchOnWindowFocus: false, // Kh√¥ng refetch khi focus l·∫°i tab
  });
};

// Realtime -----------------------------------------------------------------------------------

/// d·ªØ li·ªáu workspace t·ªëng
export const useGetWorkspaces = () => {
  const queryClient = useQueryClient();
  const channelRef = useRef(null);

  // L·∫•y userId t·ª´ localStorage
  const userId = localStorage.getItem("idMember");

  // X·ª≠ l√Ω s·ª± ki·ªán khi c√≥ th√†nh vi√™n m·ªõi ƒë∆∞·ª£c m·ªùi
  const handleMemberInvited = useCallback(
    (event) => {
      if (event?.user?.id === userId) {
        console.log("üì© MemberInvitedToWorkspace:", event);
        // N·∫øu tr√πng, invalidate l·∫°i query workspaces ƒë·ªÉ refetch d·ªØ li·ªáu
        queryClient.invalidateQueries({ queryKey: ["workspaces"] });
        queryClient.invalidateQueries({
          queryKey: ["workspace", event?.user?.workspaceId],
        });
      }
    },
    [queryClient, userId]
  );

  // X·ª≠ l√Ω s·ª± ki·ªán khi c√≥ thay ƒë·ªïi th√†nh vi√™n (th√™m, x√≥a, c·∫≠p nh·∫≠t quy·ªÅn)
  const handleWorkspaceMemberUpdated = useCallback(
    (event) => {
      console.log("üì¢ WorkspaceMemberUpdated:", event);
      // N·∫øu s·ª± ki·ªán li√™n quan ƒë·∫øn userId, invalidate l·∫°i query workspaces
      if (event?.user?.id === userId) {
        queryClient.invalidateQueries({ queryKey: ["workspaces"] });
        queryClient.invalidateQueries({
          queryKey: ["workspace", event?.user?.workspaceId],
        });
      }
    },
    [queryClient, userId]
  );

  useEffect(() => {
    if (!userId) return;
    const channel = echoInstance.channel(`user.${userId}`);
    channelRef.current = channel;

    // L·∫Øng nghe s·ª± ki·ªán MemberInvitedToWorkspace
    channel.listen(".MemberInvitedToWorkspace", handleMemberInvited);

    // L·∫Øng nghe s·ª± ki·ªán WorkspaceMemberUpdated
    channel.listen(".WorkspaceMemberUpdated", handleWorkspaceMemberUpdated);

    return () => {
      if (channelRef.current) {
        // D·ª´ng l·∫Øng nghe khi component unmount
        channelRef.current.stopListening(".MemberInvitedToWorkspace");
        channelRef.current.stopListening(".WorkspaceMemberUpdated");
        echoInstance.leave(`user.${userId}`);
      }
    };
  }, [userId, handleMemberInvited, handleWorkspaceMemberUpdated]);

  // Fetch workspaces
  return useQuery({
    queryKey: ["workspaces"],
    queryFn: getWorkspacesAll,
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
    refetchOnWindowFocus: false, // Kh√¥ng refetch khi focus l·∫°i tab
    retry: 2, // Th·ª≠ l·∫°i 2 l·∫ßn n·∫øu l·ªói
    onSuccess: (data) => {
      console.log("‚úÖ Danh s√°ch workspaces:", data);
    },
    onError: (error) => {
      console.error("‚ùå L·ªói khi l·∫•y danh s√°ch workspaces:", error);
    },
  });
};

export const useGetWorkspaceById = (workspaceId) => {
  const queryClient = useQueryClient();
  const channelRef = useRef(null);
  const userId = localStorage.getItem("idMember");

  const handleWorkspaceMemberUpdated = useCallback(
    (event) => {
      console.log("üì¢ WorkspaceMemberUpdated:", event);
      if (event?.workspace?.id === workspaceId) {
        queryClient.invalidateQueries({ queryKey: ["workspace", workspaceId] });
      }
    },
    [queryClient, workspaceId]
  );

  const handleJoinRequestSent = useCallback(
    (event) => {
      console.log("üì© JoinRequestSent:", event);
      if (event?.workspace?.id === workspaceId) {
        queryClient.invalidateQueries({ queryKey: ["workspace", workspaceId] });
      }
    },
    [queryClient, workspaceId]
  );

  useEffect(() => {
    if (!userId || !workspaceId) return;
    const channel = echoInstance.channel(`workspace.${workspaceId}`);
    channelRef.current = channel;

    channel.listen(".WorkspaceMemberUpdated", handleWorkspaceMemberUpdated);
    channel.listen(".JoinRequestSent", handleJoinRequestSent);

    return () => {
      if (channelRef.current) {
        channelRef.current.stopListening(".WorkspaceMemberUpdated");
        channelRef.current.stopListening(".JoinRequestSent");
        echoInstance.leave(`workspace.${workspaceId}`);
      }
    };
  }, [
    userId,
    workspaceId,
    handleWorkspaceMemberUpdated,
    handleJoinRequestSent,
  ]);

  return useQuery({
    queryKey: ["workspace", workspaceId],
    queryFn: () => getWorkspaceById(workspaceId),
    enabled: !!workspaceId,
    staleTime: 1000 * 60 * 5,
    cacheTime: 1000 * 60 * 30,
    onError: (error) => {
      console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu workspace:", error);
    },
  });
};

// -----------------------------------------------------------------------------------

export const useGetGuestWorkspaces = () => {
  return useQuery({
    queryKey: ["guestWorkspaces"],
    queryFn: getGuestWorkspace,
    staleTime: 5 * 60 * 1000, // 5 ph√∫t
    cacheTime: 10 * 60 * 1000, // 10 ph√∫t
    refetchOnWindowFocus: false, // Kh√¥ng refetch khi focus l·∫°i tab
    retry: 2, // Th·ª≠ l·∫°i 2 l·∫ßn n·∫øu l·ªói
    onError: (error) => {
      console.error("L·ªói khi l·∫•y danh s√°ch workspaces kh√°ch:", error);
    },
  });
};

export const useGetWorkspaceByName = (workspaceName) => {
  return useQuery({
    queryKey: ["workspace", workspaceName], // Key ƒë·ªÉ cache d·ªØ li·ªáu
    queryFn: () => getWorkspaceByName(workspaceName),
    enabled: !!workspaceName, // Ch·ªâ g·ªçi API n·∫øu name t·ªìn t·∫°i
    staleTime: 1000 * 60 * 5, // D·ªØ li·ªáu cache s·∫Ω ƒë∆∞·ª£c gi·ªØ 5 ph√∫t tr∆∞·ªõc khi b·ªã xem l√† c≈©
    cacheTime: 1000 * 60 * 30, // Gi·ªØ d·ªØ li·ªáu cache trong 30 ph√∫t ngay c·∫£ khi kh√¥ng s·ª≠ d·ª•ng
    retry: 2, // Th·ª≠ l·∫°i t·ªëi ƒëa 2 l·∫ßn n·∫øu request th·∫•t b·∫°i
  });
};

export const useGetBoardMarkedByWorkspace = (workspaceName) => {
  return useQuery({
    queryKey: ["BoardMarked", workspaceName], // Key ƒë·ªÉ cache d·ªØ li·ªáu
    queryFn: () => getBoardMarkedByWorkspace(workspaceName),
    enabled: !!workspaceName, // Ch·ªâ g·ªçi API n·∫øu name t·ªìn t·∫°i
    staleTime: 1000 * 60 * 5, // D·ªØ li·ªáu cache s·∫Ω ƒë∆∞·ª£c gi·ªØ 5 ph√∫t tr∆∞·ªõc khi b·ªã xem l√† c≈©
    cacheTime: 1000 * 60 * 30, // Gi·ªØ d·ªØ li·ªáu cache trong 30 ph√∫t ngay c·∫£ khi kh√¥ng s·ª≠ d·ª•ng
    retry: 2, // Th·ª≠ l·∫°i t·ªëi ƒëa 2 l·∫ßn n·∫øu request th·∫•t b·∫°i
  });
};

export const useCreateWorkspace = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: createWorkspace,
    onSuccess: () => {
      queryClient.invalidateQueries(["workspaces"]);
    },
    onError: (error) => {
      console.error("L·ªói khi t·∫°o workspace:", error);
    },
  });
};

export const useUpdateInforWorkspace = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ id, data }) => updateWorkspaceInfo(id, data),
    onSuccess: (updatedWorkspace) => {
      queryClient.invalidateQueries({ queryKey: ["workspaces"], exact: true });
    },
    onError: (error) => {
      console.error("L·ªói khi c·∫≠p nh·∫≠t workspace:", error);
    },
  });
};

export const useGetUserWorkspaces = () => {
  return useQuery({
    queryKey: ["userWorkspaces"], // Key ƒë·ªÉ cache d·ªØ li·ªáu
    queryFn: getUserWorkspaces,
    staleTime: 1000 * 60 * 5, // D·ªØ li·ªáu s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t
    cacheTime: 1000 * 60 * 30, // D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c cache trong 30 ph√∫t
    retry: 2, // Th·ª≠ l·∫°i 2 l·∫ßn n·∫øu c√≥ l·ªói
  });
};

export const useUserWorkspaces = () => {
  return useQuery({
    queryKey: ["userWorkspaces2"],
    queryFn: getUserWorkspaces2,
  });
};

// Hook to change a member's type in a workspace
export const useChangeMemberType = (workspaceId) => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ workspaceId, userId, memberType }) =>
      changeType(workspaceId, userId, memberType),
    onSuccess: (response, variables) => {
      queryClient.invalidateQueries({
        queryKey: ["workspace", variables.workspaceId],
        exact: true,
      });
    },
    onError: (error) => {
      console.error("Error when changing member type:", error);
    },
  });
};

// Hook to remove a member from a workspace
export const useRemoveMember = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ workspaceId, userId }) =>
      removeMemberWorkspace(workspaceId, userId),
    onSuccess: (response, variables) => {
      // Invalidate the workspace query to refresh workspace data
      queryClient.invalidateQueries({
        queryKey: ["workspace", variables.workspaceId],
        exact: true,
      });
    },
    onError: (error) => {
      console.error("Error when removing member:", error);
    },
  });
};

// export const useCheckMemberInWorkspace = (workspaceId, userId) => {
//   return useQuery({
//     queryKey: ["workspace-member-check", workspaceId, userId], // Unique key theo c·∫£ 2 gi√° tr·ªã
//     queryFn: () => useCheckMemberInWorkspace(workspaceId, userId),
//     enabled: !!workspaceId && !!userId, // G·ªçi API khi c·∫£ 2 ƒë·ªÅu t·ªìn t·∫°i
//     staleTime: 1000 * 60 * 5, // 5 ph√∫t
//     cacheTime: 1000 * 60 * 30, // 30 ph√∫t
//     retry: 2,
//   });
// };
