import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { getChecklistItemsByCheckList, createCheckListItem, deleteCheckListItem, toggleCheckListItemStatus, updateCheckListItemName, toggleCheckListItemMember, getMembersInCheckListItem } from "../api/models/checkListItemsApi";
import { useEffect } from "react";
import echoInstance from "./realtime/useRealtime";


// export const useChecklistsItemByCheckList = (checklist_id) => {
//     return useQuery({
//         queryKey: ["checklist-items", checklist_id],
//         queryFn: () => getChecklistItemsByCheckList(checklist_id), // G·ªçi API l·∫•y danh s√°ch comment
//         enabled: !!checklist_id, // Ch·ªâ g·ªçi API n·∫øu c√≥ cardId
//         staleTime: 1000 * 60 * 5, // Cache trong 5 ph√∫t
//         cacheTime: 1000 * 60 * 30, // Gi·ªØ cache trong 30 ph√∫t
//     });
// };



export const useCreateCheckListItem = () => {
    const queryClient = useQueryClient();

    // const { checklist_id } = variables;

    // console.log(checklist_id);

    const createItem = useMutation({
        mutationFn: ({ checklist_id, name }) => createCheckListItem({ checklist_id, name }),

        onSuccess: (newItem, { checklist_id }) => {

            console.log("‚úÖ Th√™m m·ª•c checklist th√†nh c√¥ng:", newItem);
            console.log("üÜï Checklist ID:", checklist_id);

            // console.log(`üì° ƒêang l·∫Øng nghe k√™nh: checklist.${checklist_id}`);

            // setLatestChecklistId(checklist_id);


            // C·∫≠p nh·∫≠t danh s√°ch CheckListItem li√™n quan
            // queryClient.invalidateQueries({ queryKey: ["checklistItems", checklist_id] });
            // queryClient.invalidateQueries({ queryKey: ["checklists"] });
            queryClient.invalidateQueries({ queryKey: ["lists"] });
        },

        onError: (error) => {
            console.error("‚ùå L·ªói khi th√™m m·ª•c checklist:", error);
        },
    });

    return createItem

};



export const useToggleCheckListItemStatus = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: (itemId) => toggleCheckListItemStatus(itemId),
        onSuccess: (_, itemId) => {
            console.log(`‚úÖ Tr·∫°ng th√°i item ${itemId} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`);

            // queryClient.invalidateQueries({ queryKey: ["checklists"] });
            queryClient.invalidateQueries({ queryKey: ["lists"] });
            // queryClient.invalidateQueries({ queryKey: ["activities"] }); 
        },
        onError: (error) => {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
        },
    });
};


export const useUpdateCheckListItemName = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ itemId, name }) => updateCheckListItemName(itemId, name),
        onSuccess: (_, variables) => {
            console.log(`‚úÖ C·∫≠p nh·∫≠t t√™n checklist item th√†nh c√¥ng: ${variables.itemId}`);

            // C·∫≠p nh·∫≠t danh s√°ch checklist ngay l·∫≠p t·ª©c
            // queryClient.invalidateQueries({ queryKey: ["checklists"] });
        },
        onError: (error) => {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t t√™n checklist item:", error);
        },
        // onSettled: () => {
        //     // ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c ƒë·ªìng b·ªô sau khi x√≥a
        //     queryClient.invalidateQueries(["checklist-items"]);
        // },
    });
};

export const useDeleteCheckListItem = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: (id) => deleteCheckListItem(id),
        onMutate: async (id) => {
            // H·ªßy c√°c query ƒëang ch·∫°y
            await queryClient.cancelQueries(["checklist-items"]);

            // L·∫•y d·ªØ li·ªáu c≈©
            const previousItems = queryClient.getQueryData(["checklist-items"]);


            // C·∫≠p nh·∫≠t danh s√°ch ngay l·∫≠p t·ª©c m√† kh√¥ng c·∫ßn reload trang
            queryClient.setQueryData(["checklist-items"], (oldItems = []) =>
                oldItems.filter((item) => item.id !== id)
            );

            return { previousItems };
        },
        onError: (error, id, context) => {
            console.error("‚ùå L·ªói khi x√≥a ChecklistItem:", error);
            // N·∫øu l·ªói, kh√¥i ph·ª•c d·ªØ li·ªáu c≈©
            queryClient.setQueryData(["checklist-items"], context.previousItems);
        },
        onSettled: () => {
            // ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c ƒë·ªìng b·ªô sau khi x√≥a
            // queryClient.invalidateQueries({ queryKey: ["checklists"] });
            queryClient.invalidateQueries({ queryKey: ["lists"] });

        },
    });
};

export const useGetMemberInCheckListItem = (itemId) => {
    const queryClient = useQueryClient();
    const checkListMembers = useQuery({
        queryKey: ["checklist-item-members", itemId],
        queryFn: () => getMembersInCheckListItem(itemId),
        enabled: !!itemId, // ch·ªâ g·ªçi khi c√≥ itemId
        staleTime: 1000 * 60, // 1 ph√∫t kh√¥ng b·ªã g·ªçi l·∫°i
        cacheTime: 1000 * 300, // gi·ªØ cache 5 ph√∫t
    });

    useEffect(() => {
        if (!itemId || !echoInstance) return;

        const channel = echoInstance.channel(`checklist-item.${itemId}`);
        // console.log(`üì° ƒêang l·∫Øng nghe k√™nh: card.${cardId}`);

        channel.listen(".ChecklistItemMemberUpdated", (event) => {
            // console.log("üîÑ Nh·∫≠n s·ª± ki·ªán ChecklistItemMemberUpdated:", event);

            queryClient.invalidateQueries({ queryKey: ["checklist-item-members", itemId] });

        });

        return () => {
            channel.stopListening(".ChecklistItemMemberUpdated");
            echoInstance.leave(`checklist-item.${itemId}`);
        };
    }, [itemId, queryClient]);

    return checkListMembers;

};

export const useToggleCheckListItemMember = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ itemId, userId }) => toggleCheckListItemMember(itemId, userId),
        onSuccess: (_, variables) => {
            console.log(`‚úÖ Toggle th√†nh vi√™n th√†nh c√¥ng: itemId = ${variables.itemId}, userId = ${variables.userId}`);
            // T√πy ch·ªçn: Invalidate query ƒë·ªÉ load l·∫°i danh s√°ch th√†nh vi√™n ho·∫∑c checklist items n·∫øu c·∫ßn
            // queryClient.invalidateQueries({ queryKey: ["checklists"] });
            // ho·∫∑c n·∫øu b·∫°n l∆∞u ri√™ng: 
            queryClient.invalidateQueries({ queryKey: ["checklist-item-members", variables.itemId] });
        },
        onError: (error) => {
            console.error("‚ùå L·ªói khi toggle member checklist item:", error);
        },
    });
};


