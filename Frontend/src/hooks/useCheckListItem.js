import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { getChecklistItemsByCheckList, createCheckListItem, deleteCheckListItem, toggleCheckListItemStatus, updateCheckListItemName, toggleCheckListItemMember, getMembersInCheckListItem } from "../api/models/checkListItemsApi";
import { useEffect } from "react";
import echoInstance from "./realtime/useRealtime";


// export const useChecklistsItemByCheckListItem = (itemId) => {
//     return useQuery({
//         queryKey: ["checklist-items", itemId],
//         queryFn: () => getChecklistItemsByCheckList(itemId), // G·ªçi API l·∫•y danh s√°ch comment
//         enabled: !!itemId, // Ch·ªâ g·ªçi API n·∫øu c√≥ cardId
//         staleTime: 1000 * 60 * 5, // Cache trong 5 ph√∫t
//         cacheTime: 1000 * 60 * 30, // Gi·ªØ cache trong 30 ph√∫t
//     });
// };




export const useCreateCheckListItem = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ checklist_id, name }) => createCheckListItem({ checklist_id, name }),

        onSuccess: (newItem, { checklist_id, cardId }) => {
            console.log("‚úÖ Th√™m m·ª•c checklist th√†nh c√¥ng:", newItem);

            // C·∫≠p nh·∫≠t l·∫°i danh s√°ch checklistItems c·ªßa checklist ƒë√≥
            queryClient.invalidateQueries({ queryKey: ["checklistItems", checklist_id], exact: true });

            // C·∫≠p nh·∫≠t l·∫°i checklist ch·ª©a item (v√≠ d·ª• completion rate)
            queryClient.invalidateQueries({ queryKey: ["checklists", cardId], exact: true });

            // C·∫≠p nh·∫≠t activity n·∫øu backend c√≥ tr·∫£ ra activity m·ªõi
            // queryClient.invalidateQueries({ queryKey: ["activities", cardId], exact: true });
        },

        onError: (error) => {
            console.error("‚ùå L·ªói khi th√™m m·ª•c checklist:", error);
        },
    });
};




export const useToggleCheckListItemStatus = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ itemId }) => toggleCheckListItemStatus(itemId),
        onSuccess: (_, { itemId, cardId }) => {
            console.log(`‚úÖ Tr·∫°ng th√°i item ${itemId} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`);

            // C·∫≠p nh·∫≠t l·∫°i danh s√°ch item c·ªßa checklist
            // queryClient.invalidateQueries({ queryKey: ["checklistItems", checklist_id], exact: true });

            // C·∫≠p nh·∫≠t l·∫°i checklist (t·ªâ l·ªá completion)
            queryClient.invalidateQueries({ queryKey: ["checklists", cardId], exact: true });

            // C·∫≠p nh·∫≠t activity n·∫øu c√≥
            queryClient.invalidateQueries({ queryKey: ["activities", cardId], exact: true });
        },
        onError: (error) => {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
        },
    });
};



export const useUpdateCheckListItemName = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ itemId, name }) => updateCheckListItemName(itemId, name),
        onSuccess: (_, { cardId }) => {
            console.log(`‚úÖ C·∫≠p nh·∫≠t t√™n checklist item th√†nh c√¥ng.`);

            // L√†m m·ªõi danh s√°ch items thu·ªôc checklist
            // queryClient.invalidateQueries({ queryKey: ["checklistItems", checklist_id], exact: true });

            // N·∫øu c·∫ßn c·∫≠p nh·∫≠t checklist cha
            queryClient.invalidateQueries({ queryKey: ["checklists", cardId], exact: true });
        },
        onError: (error) => {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t t√™n checklist item:", error);
        },
    });
};

export const useDeleteCheckListItem = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ id }) => deleteCheckListItem(id),
        onMutate: async ({ id, checklist_id }) => {
            // H·ªßy c√°c query li√™n quan ƒëang ch·∫°y
            await queryClient.cancelQueries({ queryKey: ["checklistItems", checklist_id] });

            // L∆∞u l·∫°i d·ªØ li·ªáu c≈©
            const previousItems = queryClient.getQueryData(["checklistItems", checklist_id]);

            // Optimistic update: x√≥a lu√¥n trong cache
            queryClient.setQueryData(["checklistItems", checklist_id], (oldItems = []) =>
                oldItems.filter((item) => item.id !== id)
            );

            return { previousItems, checklist_id };
        },
        onError: (error, { id, checklist_id }, context) => {
            console.error("‚ùå L·ªói khi x√≥a ChecklistItem:", error);
            // Rollback d·ªØ li·ªáu n·∫øu l·ªói
            if (context?.previousItems) {
                queryClient.setQueryData(["checklistItems", checklist_id], context.previousItems);
            }
        },
        onSettled: (_, __, { cardId }) => {
            // L√†m m·ªõi d·ªØ li·ªáu sau c√πng
            // queryClient.invalidateQueries({ queryKey: ["checklistItems", checklist_id], exact: true });
            queryClient.invalidateQueries({ queryKey: ["checklists", cardId], exact: true });
            queryClient.invalidateQueries({ queryKey: ["lists"] });
        },
    });
};


export const useGetMemberInCheckListItem = (itemId) => {
    const queryClient = useQueryClient();
    const checkListMembers = useQuery({
        queryKey: ["checklist-item-members", itemId],
        queryFn: () => getMembersInCheckListItem(itemId),
        enabled: !!itemId, // ch·ªâ g·ªçi khi c√≥ itemId
        staleTime: 1000 * 60, // 1 ph√∫t kh√¥ng b·ªã g·ªçi l·∫°i
        cacheTime: 1000 * 300, // gi·ªØ cache 5 ph√∫t
    });

    useEffect(() => {
        if (!itemId || !echoInstance) return;

        const channel = echoInstance.channel(`checklist-item.${itemId}`);
        // console.log(`üì° ƒêang l·∫Øng nghe k√™nh: card.${cardId}`);

        channel.listen(".ChecklistItemMemberUpdated", (event) => {
            // console.log("üîÑ Nh·∫≠n s·ª± ki·ªán ChecklistItemMemberUpdated:", event);

            queryClient.invalidateQueries({ queryKey: ["checklist-item-members", itemId]});

        });

        return () => {
            channel.stopListening(".ChecklistItemMemberUpdated");
            echoInstance.leave(`checklist-item.${itemId}`);
        };
    }, [itemId, queryClient]);

    return checkListMembers;

};

export const useToggleCheckListItemMember = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ itemId, userId }) => toggleCheckListItemMember(itemId, userId),
        onSuccess: (_, variables) => {
            // console.log(`‚úÖ Toggle th√†nh vi√™n th√†nh c√¥ng: itemId = ${variables.itemId}, userId = ${variables.userId}`);
            // T√πy ch·ªçn: Invalidate query ƒë·ªÉ load l·∫°i danh s√°ch th√†nh vi√™n ho·∫∑c checklist items n·∫øu c·∫ßn
            // queryClient.invalidateQueries({ queryKey: ["checklists"] });
            // ho·∫∑c n·∫øu b·∫°n l∆∞u ri√™ng: 
            queryClient.invalidateQueries({ queryKey: ["checklist-item-members", variables.itemId] });
        },
        onError: (error) => {
            console.error("‚ùå L·ªói khi toggle member checklist item:", error);
        },
    });
};


