import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { generateInviteLink, getBoardMembers, getGuestBoards, removeInviteLink, removeMemberFromBoard, updateRoleMemberInBoards } from "../api/models/inviteBoardApi";
import { useNavigate } from "react-router-dom";
import { useEffect } from "react";
import echoInstance from "./realtime/useRealtime";
import { toast } from "react-toastify";
import { fetchMemberCardsAndItems } from "../api/models/memberApi";
import { toggleCardMember } from "../api/models/cardsApi";
import { useToggleCheckListItemMember } from "./useCheckListItem";


export const useGetBoardMembers = (boardId) => {

  const queryClient = useQueryClient();

  const boardMembers = useQuery({
    queryKey: ["boardMembers", boardId], // Cache theo boardId
    queryFn: () => getBoardMembers(boardId),
    enabled: !!boardId, // Ch·ªâ fetch khi c√≥ boardId
    staleTime: 60 * 1000, // Cache 1 ph√∫t (60000 ms)
    cacheTime: 5 * 60 * 1000, // L∆∞u cache 5 ph√∫t ƒë·ªÉ t·ªëi ∆∞u
    retry: 2, // T·ª± ƒë·ªông th·ª≠ l·∫°i 2 l·∫ßn n·∫øu l·ªói
    refetchOnWindowFocus: false, // Kh√¥ng fetch l·∫°i khi chuy·ªÉn tab
  });

  useEffect(() => {
    if (!boardId || !echoInstance) return;

    const channel = echoInstance.channel(`boards.${boardId}`);
    // console.log(`üì° ƒêang l·∫Øng nghe k√™nh: card.${cardId}`);



    channel.listen(".BoardUpdateRole", (data) => {
      // console.log('Realtime archive changed: ', boardId);

      queryClient.invalidateQueries(["boardMembers"]);

    });

    return () => {
      channel.stopListening(".BoardUpdateRole");
      //   channel.stopListening(".CardDelete");
      echoInstance.leave(`boards.${boardId}`);
    };
  }, [boardId, queryClient]);



  return boardMembers;
};


export const useGenerateInviteLink = (setLink) => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: generateInviteLink, // G·ªçi API t·∫°o link
    onSuccess: (data) => {
      const inviteLink = data.invite_link; // L·∫•y link t·ª´ response API

      if (inviteLink) {
        toast.success("T·∫°o link m·ªùi th√†nh c√¥ng ")
        // C·∫≠p nh·∫≠t state ngay l·∫≠p t·ª©c
        setLink(inviteLink);

        navigator.clipboard.writeText(inviteLink) // L∆∞u v√†o clipboard
          // .then(() => console.log("ƒê√£ sao ch√©p link m·ªùi:", inviteLink))
          .catch(err => console.error("L·ªói khi sao ch√©p:", err));

        // L∆∞u v√†o localStorage ƒë·ªÉ s·ª≠ d·ª•ng l·∫°i
        localStorage.setItem("InviteLink", inviteLink);
      }

      // queryClient.invalidateQueries(["workspaces"]); // C·∫≠p nh·∫≠t d·ªØ li·ªáu n·∫øu c·∫ßn
    },
    onError: (error) => {
      console.error("L·ªói khi t·∫°o link m·ªùi:", error);
      toast.error("T·∫°o link kh√¥ng th√†nh c√¥ng ")
    },
  });
};


export const useUpdateRoleMemberInBoards = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ boardId, userId, role }) => updateRoleMemberInBoards(boardId, userId, role),
    onSuccess: (data, {boardId}) => {
      if (data.success) {
      
        queryClient.invalidateQueries({ queryKey: ["boardMembers", boardId], exact: false });
        
      }
    },
    onError: (error) => {
      const errorMessage = error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      console.error("L·ªói khi c·∫≠p nh·∫≠t vai tr√≤ th√†nh vi√™n:", errorMessage);
    },
  });
};


export const useRemoveMemberFromBoard = (currentUserId) => {
  const queryClient = useQueryClient();
  const navigate = useNavigate();

  // Mutation ƒë·ªÉ x√≥a th√†nh vi√™n
  const mutation = useMutation({
    mutationFn: async ({ boardId, userId }) => {
      // üî• B∆∞·ªõc 1: L·∫•y danh s√°ch th·∫ª v√† checklist item m√† user tham gia
      const { cards, items } = await fetchMemberCardsAndItems(boardId, userId);
      
      // üî• B∆∞·ªõc 2: Xo√° user kh·ªèi board
      const response = await removeMemberFromBoard(boardId, userId);
      
      if (response.success) {
        return { success: true, message: response.message, cards, items };
      } else {
        throw new Error("X√≥a th√†nh vi√™n kh√¥ng th√†nh c√¥ng!");
      }
    },
    onSuccess: (data, variables) => {
      if (data.success) {
        // console.log("Th√†nh vi√™n ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi b·∫£ng:", data.message);
        // console.log("DEBUG - Gi√° tr·ªã c·ªßa data.cards:", data.cards);
  
        // üî• B∆∞·ªõc 3: C·∫≠p nh·∫≠t l·∫°i cache c·ªßa c√°c th·∫ª v√† checklist items m√† user b·ªã xo√°
        queryClient.invalidateQueries({ queryKey: ["boardMembers", variables.boardId] });
  
        // const cards = Array.isArray(data.cards) ? data.cards : [];

        data.cards.data.forEach((card) => {
          queryClient.invalidateQueries({ queryKey: ["membersInCard", card.id] });
          // console.log("card:", card.id);
        });
  
        data.items.data.forEach((item) => {
          queryClient.invalidateQueries({ queryKey: ["checklist-item-members", item.id] });
          // console.log("Item:", item.id);
        });
      }
    },
    onError: (error) => {
      console.error("L·ªói khi x√≥a th√†nh vi√™n:", error.message);
    },
  });
  

  // L·∫Øng nghe event realtime cho ng∆∞·ªùi d√πng hi·ªán t·∫°i
  useEffect(() => {
    if (!currentUserId) return;

    // Subscribe v√†o private channel c·ªßa user hi·ªán t·∫°i
    const channel = echoInstance.private(`user.${currentUserId}`);

    channel.listen("MemberRemovedFromBoard", (data) => {

      // toast.info(data.message); // Hi·ªÉn th·ªã th√¥ng b√°o

      // C·∫≠p nh·∫≠t cache boardMembers
     
      // L√†m m·ªõi d·ªØ li·ªáu t·ª´ server
      // queryClient.invalidateQueries({ queryKey: ["boardMembers", variables.boardId], exact: true });
      // queryClient.invalidateQueries({ queryKey: ["membersInCard", variables.boardId], exact: true });
      // queryClient.invalidateQueries({ queryKey: ["checklist-item-members", variables.boardId], exact: true });

      // navigate("/home"); // ƒêi·ªÅu h∆∞·ªõng ngay
    });

    // Cleanup khi unmount
    return () => {
      channel.stopListening("MemberRemovedFromBoard");
      echoInstance.leave(`user.${currentUserId}`);
    };
  }, [currentUserId, navigate, queryClient]);

  return mutation;
};


export const useMemberJoinedListener = (currentUserId) => {
  const queryClient = useQueryClient();

  useEffect(() => {
    const channel = echoInstance.private(`user.${currentUserId}`);

    channel.listen('MemberJoinedBoard', (data) => {
      // Hi·ªÉn th·ªã toast
      toast.success(data.message);
      // console.log('helloo')
      // L√†m m·ªõi danh s√°ch BoardMember
      queryClient.invalidateQueries({ queryKey: ['boardMembers', data.board_id], exact: true });
    });

    return () => {
      channel.stopListening('MemberJoinedBoard');
      echoInstance.leave(`user.${currentUserId}`);
    };
  }, [currentUserId, queryClient]);
};

export const useGuestBoards = () => {
  return useQuery({
    queryKey: ["guestBoards"], // Cache danh s√°ch b·∫£ng kh√°ch
    queryFn: getGuestBoards,
    staleTime: 60 * 1000, // D·ªØ li·ªáu c≈© sau 1 ph√∫t
    cacheTime: 5 * 60 * 1000, // L∆∞u cache trong 5 ph√∫t
    retry: 2, // Th·ª≠ l·∫°i t·ªëi ƒëa 2 l·∫ßn n·∫øu l·ªói
    refetchOnWindowFocus: false, // Kh√¥ng fetch l·∫°i khi chuy·ªÉn tab
  });
};

export const useRemoveInviteLink = () => {

  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: removeInviteLink, // G·ªçi API t·∫°o link
    onError: (error) => {
      console.error("L·ªói khi t·∫Øt link link m·ªùi:", error);
      toast.error("T·∫Øt link kh√¥ng th√†nh c√¥ng ")
    },
  });

}

