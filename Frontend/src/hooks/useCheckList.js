import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { getChecklistsByCard, createCheckList, updateCheckList, deleteCheckList } from "../api/models/checkListsApi";
import { useEffect } from "react";
import echoInstance from "./realtime/useRealtime";


export const useChecklistsByCard = (cardId) => {
    const queryClient = useQueryClient();
    const checklists = useQuery({
        queryKey: ["checklists", cardId],
        queryFn: () => getChecklistsByCard(cardId), // G·ªçi API l·∫•y danh s√°ch comment
        enabled: !!cardId, // Ch·ªâ g·ªçi API n·∫øu c√≥ cardId
        staleTime: 1000 * 60 * 5, // Cache trong 5 ph√∫t
        cacheTime: 1000 * 60 * 30, // Gi·ªØ cache trong 30 ph√∫t
    });

    useEffect(() => {
        if (!cardId) {
            // console.warn("‚ùå checklist_id ch∆∞a c√≥, kh√¥ng ƒëƒÉng k√Ω k√™nh.");
            return;
        }
    
        // console.log(`üì° ƒêang l·∫Øng nghe k√™nh: checklist.${cardId}`);
    
        const channel = echoInstance.channel(`checklist.${cardId}`);
    
        channel.listen(".checklistItem.created", (event) => {
            console.log("üì° Nh·∫≠n s·ª± ki·ªán ChecklistItemCreated:", event);
    
            queryClient.setQueryData(["checklistItems", event.checklistItem.checklist.id], (oldItems) => {
                console.log("üîÑ C·∫≠p nh·∫≠t danh s√°ch c≈©:", oldItems);
                if (!oldItems) return [event.checklistItem]; // N·∫øu danh s√°ch r·ªóng, th√™m m·ªõi
                return [...oldItems, event.checklistItem]; // Th√™m item m·ªõi v√†o danh s√°ch
            });
    
            queryClient.invalidateQueries({ queryKey: ["checklists"] });
            queryClient.invalidateQueries({ queryKey: ["checklistItems", event.checklistItem.checklist.id] });

        });

        channel.listen(".checklistItem.updated", (event) => {
            console.log("üîÑ Nh·∫≠n s·ª± ki·ªán ChecklistItemUpdated:", event);
    
            // queryClient.setQueryData(["checklistItems", event.checklistItem.checklist.id], (oldItems) => {
            //     if (!oldItems) return [];
    
            //     return oldItems.map((item) =>
            //         item.id === event.item.id ? { ...item, name: event.item.name } : item
            //     );
            // });
    
            queryClient.invalidateQueries({ queryKey: ["checklists", cardId] });

        });

        channel.listen(".checklistItem.deleted", (event) => {
            console.log("‚ùå Nh·∫≠n s·ª± ki·ªán ChecklistItemDeleted:", event);
        
            // queryClient.setQueryData(["checklistItems", cardId], (oldItems) => {
            //     if (!oldItems) return [];
                
            //     return oldItems.filter((item) => item.id !== Number(event.itemId)); // üî• Chuy·ªÉn itemId v·ªÅ s·ªë
            // });
        
            // queryClient.invalidateQueries({ queryKey: ["cards", cardId] });
            queryClient.invalidateQueries({ queryKey: ["checklists", cardId ] });
            queryClient.invalidateQueries({ queryKey: ["checklistItems", event.checklistItem.checklist.id] });

        });

        channel.listen(".checklist.updated", (event) => {
            console.log("üîÑ Nh·∫≠n s·ª± ki·ªán ChecklistUpdated:", event);
    
            queryClient.setQueryData(["checklists"], (oldChecklists) => {
                if (!oldChecklists) return [];
    
                return oldChecklists.map((checklist) =>
                    checklist.id === event.checklist.id ? { ...checklist, name: event.checklist.name } : checklist
                );
            });
    
            queryClient.invalidateQueries({ queryKey: ["checklists"] });
        });

        channel.listen(".checklist.created", (event) => {
            console.log("üì° Nh·∫≠n s·ª± ki·ªán ChecklistCreated:", event);


            queryClient.invalidateQueries({ queryKey: ["checklists"] });
            queryClient.invalidateQueries({ queryKey: ["activities", cardId] });
        });

        channel.listen(".checklist.deleted", (event) => {
            console.log("üóë Checklist b·ªã x√≥a:", event);
        
            // C·∫≠p nh·∫≠t danh s√°ch checklist
            // queryClient.setQueryData(["checklists", event.cardId], (oldChecklists) => {
            //     if (!oldChecklists) return [];
            //     return oldChecklists.filter(checklist => checklist.id !== event.checklistId);
            // });
        
            // // C·∫≠p nh·∫≠t activity n·∫øu c√≥
            // if (event.activity) {
            //     queryClient.setQueryData(["activities", event.cardId], (oldActivities) => {
            //         if (!oldActivities) return [];
            //         return [...oldActivities, event.activity];
            //     });
            // }
        
            queryClient.invalidateQueries({ queryKey: ["checklists"] });
            queryClient.invalidateQueries({ queryKey: ["activities"] });
        });


        channel.listen(".checklistItem.toggle", (event) => {
            console.log("üì° Nh·∫≠n s·ª± ki·ªán ChecklistItemToggle:", event);
        
            queryClient.setQueryData(["checklistItems", event.checklistItem.checklist_id], (oldItems) => {
                if (!oldItems) return [event.checklistItem];
        
                return oldItems.map((item) =>
                    item.id === event.checklistItem.id ? event.checklistItem : item
                );
            });
        
            // C·∫≠p nh·∫≠t ph·∫ßn trƒÉm ho√†n th√†nh c·ªßa checklist
            queryClient.setQueryData(["checklists"], (oldChecklists) => {
                if (!oldChecklists) return [];
        
                return oldChecklists.map((checklist) =>
                    checklist.id === event.checklistItem.checklist_id
                        ? { ...checklist, completion_rate: event.completionRate }
                        : checklist
                );
            });
        
            // N·∫øu c√≥ activity, c·∫≠p nh·∫≠t danh s√°ch ho·∫°t ƒë·ªông
            if (event.activity) {
                queryClient.setQueryData(["activities"], (oldActivities) => {
                    return oldActivities ? [event.activity, ...oldActivities] : [event.activity];
                });
            }

            queryClient.invalidateQueries({queryKey: ["checklists"]});
            queryClient.invalidateQueries({ queryKey: ["activities"] }); 
        });
        



        
    
        return () => {
            channel.stopListening(".checklistItem.created");
            channel.stopListening(".checklistItem.updated");
            channel.stopListening(".checklistItem.deleted");
            channel.stopListening(".checklist.updated");
            channel.stopListening(".checklist.created");
            channel.stopListening(".checklist.deleted");
            channel.stopListening(".checklistItem.toggle");
          
            echoInstance.leave(`checklist.${cardId}`);
        };
    }, [cardId, queryClient]); 

    return checklists
};

export const useCreateCheckList = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ card_id, name }) => createCheckList({ card_id, name }), // G·ªçi API t·∫°o checklist
        onSuccess: (newCheckList, { card_id }) => {
            // queryClient.invalidateQueries({ queryKey: ["checklists", card_id] }); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch checklist
            // queryClient.invalidateQueries({ queryKey: ["activities"] }); 
        },
        onError: (error) => {
            console.error("‚ùå L·ªói khi th√™m checklist:", error);
        },
    });
};

export const useUpdateCheckList = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ id, name }) => updateCheckList({ id, name }), // G·ªçi API c·∫≠p nh·∫≠t
        onSuccess: (_, { card_id }) => {
            // queryClient.invalidateQueries({ queryKey: ["checklists", card_id] });
            // queryClient.invalidateQueries({ queryKey: ["checklists"] });
        },
        onError: (error) => {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t checklist:", error);
        },

    });
};

export const useDeleteCheckList = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: (checklistId) => deleteCheckList(checklistId), // G·ªçi API x√≥a checklist
        onSuccess: (_, checklistId) => {
            console.log(`‚úÖ X√≥a checklist th√†nh c√¥ng: ${checklistId}`);

            // C·∫≠p nh·∫≠t danh s√°ch checklist sau khi x√≥a
            queryClient.setQueryData(["checklists"], (oldChecklists = []) =>
                oldChecklists.filter((c) => c.id !== checklistId)
            );
        },
        onError: (error) => {
            console.error("‚ùå L·ªói khi x√≥a checklist:", error);
        }
    });
};
