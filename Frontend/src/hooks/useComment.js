import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { createComment, getCommentsByCardId, deleteComment, updateComment } from "../api/models/commentsApi"; // Import API th√™m b√¨nh lu·∫≠n
import { useEffect, useMemo } from "react";
import echoInstance from "./realtime/useRealtime";


export const useCommentsByCard = (card_id) => {
    const queryClient = useQueryClient();
    const comments = useQuery({
        queryKey: ["comments", card_id], // Key duy nh·∫•t trong cache
        queryFn: () => getCommentsByCardId(card_id), // G·ªçi API l·∫•y danh s√°ch comment
        enabled: !!card_id, // Ch·ªâ g·ªçi API n·∫øu c√≥ cardId
        staleTime: 1000 * 60 * 5, // Cache trong 5 ph√∫t
        cacheTime: 1000 * 60 * 30, // Gi·ªØ cache trong 30 ph√∫t
    });

    useEffect(() => {
        if (!card_id || !echoInstance) return;

        const channel = echoInstance.channel(`card.${card_id}`);

        channel.listen(".card.comment.added", async (event) => {
            console.log("üì° Nh·∫≠n event t·ª´ Pusher:", event);

            if (event?.comment?.card_id === card_id) {
                // Ki·ªÉm tra n·∫øu comment t·ª´ Pusher c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin user kh√¥ng
                if (!event.comment.user) {
                    console.warn("‚ö†Ô∏è Comment t·ª´ Pusher thi·∫øu th√¥ng tin user. G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i...");

                    // G·ªçi API l·∫°i ƒë·ªÉ l·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa comment
                    await queryClient.invalidateQueries({ queryKey: ["comments", card_id] });
                    return;
                }

                queryClient.setQueryData(["comments", card_id], (oldData) => {
                    console.log("üîÑ D·ªØ li·ªáu c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t:", oldData);

                    const newData = oldData ? [...oldData, event.comment] : [event.comment];

                    console.log("‚úÖ D·ªØ li·ªáu m·ªõi sau khi c·∫≠p nh·∫≠t:", newData);
                    return newData;
                });

                // console.log("üõ† Cache hi·ªán t·∫°i:", queryClient.getQueryData(["comments", card_id]));
            }
        });

        channel.listen(".card.comment.deleted", (event) => {
            console.log("üóë Nh·∫≠n event x√≥a b√¨nh lu·∫≠n t·ª´ Pusher:", event);
    
            queryClient.setQueryData(["comments", card_id], (oldData) => {
                return oldData ? oldData.filter(comment => comment.id !== event.commentId) : [];
            });

            queryClient.invalidateQueries({ queryKey: ["lists"] });
    
        });

        channel.listen(".card.comment.updated", (event) => {
            console.log("üì° Nh·∫≠n event c·∫≠p nh·∫≠t comment:", event);
    
            queryClient.setQueryData(["comments", card_id], (oldData) => {
                if (!oldData) return [event.comment];
    
                return oldData.map(comment => 
                    comment.id === event.comment.id ? event.comment : comment
                );
            });
        });



        return () => {
            channel.stopListening(".card.comment.added");
            channel.stopListening(".card.comment.deleted");
            channel.stopListening(".card.comment.updated");
            echoInstance.leave(`card.${card_id}`);
           
        };
    }, [card_id, queryClient]);


    return comments;

};

export const useCreateComment = () => {
    const queryClient = useQueryClient();

    const mutation = useMutation({
        mutationFn: ({ card_id, user_id, content }) => createComment({ card_id, user_id, content }),
        onSuccess: (newComment, { card_id }) => {
            // queryClient.setQueryData(["comments", card_id], (oldData) => {
            //     return oldData ? [...oldData, newComment] : [newComment];
            // });
            
            queryClient.invalidateQueries({ queryKey: ["lists"] });
        },
        onError: (error) => {
            console.error("‚ùå L·ªói khi th√™m b√¨nh lu·∫≠n:", error);
        },
    });

    return mutation;

};




export const useDeleteComment = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: (commentId) => deleteComment(commentId), // G·ªçi API x√≥a
    
        onError: (error) => {
            console.error("‚ùå L·ªói khi x√≥a b√¨nh lu·∫≠n:", error);
        }
    });
};

export const useUpdateComment = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: updateComment,
        onSuccess: (_, variables) => {
            // C·∫≠p nh·∫≠t danh s√°ch b√¨nh lu·∫≠n sau khi s·ª≠a
            // queryClient.invalidateQueries(["comments", variables.cardId]);
        },
        onError: (error) => {
            console.error("‚ùå L·ªói khi ch·ªânh s·ª≠a b√¨nh lu·∫≠n:", error);
        },
    });
};
