import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { updateCardLabel, createLabel, getLabelsByBoard, getLabelsByCard, deleteLabelByBoard, updateLabelName } from "../api/models/labelsApi";
// Custom Hook ƒë·ªÉ l·∫•y labels
export const useLabels = (boardId) => {
    return useQuery({
        queryKey: ["labels", boardId], // Cache theo boardId
        queryFn: () => getLabelsByBoard(boardId),
        enabled: !!boardId, // Ch·ªâ fetch khi c√≥ boardId
        staleTime: 0, // Cache 1 ph√∫t
    });
};
// th√™m nh√£n
export const useCreateLabel = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ boardId, data }) => createLabel(boardId, data), // üü¢ S·ª≠ d·ª•ng mutationFn thay v√¨ truy·ªÅn tr·ª±c ti·∫øp function

        onSuccess: (newLabel, { boardId }) => {
            queryClient.invalidateQueries({ queryKey: ["labels", boardId] }); // üü¢ Thay `variables.boardId` b·∫±ng `boardId`
        },

        onError: (error) => {
            console.error("L·ªói khi t·∫°o nh√£n:", error.response?.data || error.message);
        },
    });
};
// th√™m v√† x√≥a nh√£n kh·ªèi th·∫ª
export const useUpdateCardLabel = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ cardId, labelId, action }) => updateCardLabel(cardId, labelId, action),

        onSuccess: (_, { cardId, labelId, action, boardId }) => {
            
            queryClient.setQueryData(["cards", cardId], (oldData) => {
                if (!oldData) return oldData;
                return {
                    ...oldData,
                    labels: action === "add"
                        ? [...oldData.labels, labelId] // Th√™m label n·∫øu action l√† "add"
                        : oldData.labels.filter(id => id !== labelId) // X√≥a label n·∫øu action l√† "remove"
                };
            });
        },
    });
};
export const useUpdateLabelName = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({  labelId, data }) => updateLabelName(labelId, data), // üü¢ G·ªçi h√†m updateLabel

        onSuccess: (_, { boardId }) => {
            queryClient.invalidateQueries({ queryKey: ["labels", boardId] }); // üü¢ C·∫≠p nh·∫≠t l·∫°i danh s√°ch nh√£n sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
            
        },

        onError: (error) => {
            console.error("L·ªói khi c·∫≠p nh·∫≠t t√™n nh√£n:", error.response?.data || error.message);
        },
    });
};

export const useCardLabels = (cardId) => {
    return useQuery({
        queryKey: ["cardLabels", cardId],
        queryFn: () => getLabelsByCard(cardId),
        enabled: !!cardId, // Ch·ªâ fetch khi c√≥ cardId
    });
};
export const useDeleteLabelByBoard = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ labelId }) => deleteLabelByBoard(labelId), // X√≥a label ch·ªâ c·∫ßn labelId
        onSuccess: (_, { boardId }) => {
            queryClient.invalidateQueries(["labels", boardId]); // Ch·ªâ c·∫≠p nh·∫≠t labels c·ªßa board ƒë√≥
        },
        onError: (error) => {
            console.error("L·ªói khi x√≥a nh√£n:", error);
        },
    });
};


