import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { updateCardLabel, createLabel, getLabelsByBoard, getLabelsByCard, deleteLabelByBoard, updateLabelName } from "../api/models/labelsApi";
// Custom Hook ƒë·ªÉ l·∫•y labels
export const useLabels = (boardId) => {
    return useQuery({
        queryKey: ["labels", boardId], // Cache theo boardId
        queryFn: () => getLabelsByBoard(boardId),
        enabled: !!boardId, // Ch·ªâ fetch khi c√≥ boardId
        staleTime: 0, // Cache 1 ph√∫t
    });
};
// th√™m nh√£n
export const useCreateLabel = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ boardId, data }) => createLabel(boardId, data), // üü¢ S·ª≠ d·ª•ng mutationFn thay v√¨ truy·ªÅn tr·ª±c ti·∫øp function

        onSuccess: (newLabel, { boardId }) => {
            queryClient.invalidateQueries({ queryKey: ["labels", boardId] }); // üü¢ Thay `variables.boardId` b·∫±ng `boardId`
        },

        onError: (error) => {
            console.error("L·ªói khi t·∫°o nh√£n:", error.response?.data || error.message);
        },
    });
};
// th√™m v√† x√≥a nh√£n kh·ªèi th·∫ª
export const useUpdateCardLabel = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ cardId, labelId, action }) => updateCardLabel(cardId, labelId, action),

        onSuccess: (_, { cardId, labelId, action, boardId }) => {
         
            // queryClient.setQueryData(["cards", cardId], (oldData) => {
            //     if (!oldData) return oldData;
            //     return {
            //         ...oldData,
            //         labels: action === "add"
            //             ? [...(oldData.labels || []), labelId] // ƒê·∫£m b·∫£o oldData.labels l√† m·∫£ng h·ª£p l·ªá
            //             : (oldData.labels || []).filter(id => id !== labelId) // Tr√°nh l·ªói undefined
            //     };
            // });

            queryClient.setQueryData(["cardLabels", cardId], (oldLabels) => {
                if (!oldLabels) return oldLabels;
                return action === "add"
                    ? [...(oldLabels || []), { id: labelId, checked: true }] // ƒê·∫£m b·∫£o oldLabels l√† m·∫£ng h·ª£p l·ªá
                    : (oldLabels || []).filter(label => label.id !== labelId);
            });

            queryClient.invalidateQueries({ queryKey: ["labels", cardId]});
            queryClient.invalidateQueries({ queryKey: ["cardLabels"] });
        },
    });
};

export const useUpdateLabelName = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({  labelId, data }) => updateLabelName(labelId, data), // üü¢ G·ªçi h√†m updateLabel
        onError: (error) => {
            console.error("L·ªói khi c·∫≠p nh·∫≠t t√™n nh√£n:", error.response?.data || error.message);
        },
    });
};

export const useCardLabels = (cardId) => {
    const queryClient = useQueryClient();
    return useQuery({
        queryKey: ["cardLabels", cardId],
        queryFn: () => getLabelsByCard(cardId),
        enabled: !!cardId, // Ch·ªâ fetch khi c√≥ cardId
    });
};
export const useDeleteLabelByBoard = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ labelId }) => deleteLabelByBoard(labelId), // X√≥a label ch·ªâ c·∫ßn labelId
        onError: (error) => {
            console.error("L·ªói khi x√≥a nh√£n:", error);
        },
    });
};


