import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
// import { updateCardLabel, createLabel, getLabelsByBoard, getLabelsByCard, deleteLabelByBoard, updateLabelName } from "../api/models/labelsApi";
import {
  updateCardLabel,
  createLabel,
  getLabelsByCard,
  deleteLabelByBoard,
  updateLabelName,
} from "../api/models/labelsApi";
import echoInstance from "./realtime/useRealtime";
import { useEffect } from "react";
// Custom Hook ƒë·ªÉ l·∫•y labels

// export const useLabels = (boardId) => {
//     const queryClient = useQueryClient();
//     const labels = useQuery({
//         queryKey: ["labels", boardId], // Cache theo boardId
//         queryFn: () => getLabelsByBoard(boardId),
//         enabled: !!boardId, // Ch·ªâ fetch khi c√≥ boardId
//         staleTime: 0, // Cache 1 ph√∫t
//     });

//     useEffect(() => {
//         if (!boardId) return;
//         const channel = echoInstance.channel(`board.${boardId}`);
//         // console.log(`üì° ƒêang l·∫Øng nghe k√™nh: board.${boardId}`);

//         channel.listen(".label.created", (event) => {
//             console.log("üì° Nh·∫≠n s·ª± ki·ªán Label Created:", event);

//             queryClient.setQueryData(["labels", boardId], (oldData) => {
//                 return oldData ? [...oldData, event.label] : [event.label];
//             });

//             // queryClient.invalidateQueries({ queryKey: ["cardLabels", cardId] });
//             queryClient.invalidateQueries({ queryKey: ["labels", boardId], exact: true });
//             // queryClient.invalidateQueries({ queryKey: ["lists"] });
//         });

//         channel.listen(".label.nameUpdated", (event) => {
//             // console.log("üì° Nh·∫≠n s·ª± ki·ªán Label Updated:", event);

//             queryClient.setQueryData(["labels", boardId], (oldLabels) => {
//                 console.log("üîÑ Tr∆∞·ªõc khi c·∫≠p nh·∫≠t:", oldLabels);

//                 if (!oldLabels) return [event.label];

//                 const updatedLabels = oldLabels.map((label) =>
//                     label.id === event.label.id ? event.label : label
//                 );

//                 console.log("‚úÖ Sau khi c·∫≠p nh·∫≠t:", updatedLabels);
//                 return updatedLabels;
//             });

//             queryClient.invalidateQueries({ queryKey: ["labels"],boardId }); // C·∫≠p nh·∫≠t UI
//             queryClient.invalidateQueries({ queryKey: ["cardLabels"] });
//             // queryClient.invalidateQueries({ queryKey: ["lists"] });

//         });

//         channel.listen(".label.deleted", (event) => {
//             console.log("üì° Label Deleted Event:", event);

//             queryClient.setQueryData(["labels", boardId], (oldLabels) => {
//                 if (!oldLabels) return [];

//                 return oldLabels.filter((label) => label.id !== event.labelId);
//             });
//             //  queryClient.invalidateQueries({ queryKey: ["lists"] });

//             queryClient.invalidateQueries({ queryKey: ["labels", boardId], exact: true });
//             // queryClient.invalidateQueries({ queryKey: ["labels"] });

//         });

//         return () => {
//             channel.stopListening(".label.created");
//             channel.stopListening(".label.nameUpdated");
//             channel.stopListening(".label.deleted");
//             echoInstance.leave(`board.${boardId}`);
//             // console.log(`üõë Ng·ª´ng l·∫Øng nghe k√™nh: board.${boardId}`);
//         };
//     }, [boardId, queryClient]);

//     return labels;
// };

// th√™m nh√£n
export const useCreateLabel = () => {
  const queryClient = useQueryClient();

  return useMutation({
mutationFn: ({ boardId, data }) => createLabel(boardId, data), // üü¢ S·ª≠ d·ª•ng mutationFn thay v√¨ truy·ªÅn tr·ª±c ti·∫øp function

    onSuccess: (newLabel, { boardId }) => {
      queryClient.invalidateQueries({
        queryKey: ["labels", boardId],
        exact: true,
      });
    },

    onError: (error) => {
      console.error("L·ªói khi t·∫°o nh√£n:", error.response?.data || error.message);
    },
  });
};

export const useCardLabels = (cardId) => {
  const queryClient = useQueryClient();
  const labelCard = useQuery({
    queryKey: ["cardLabels", cardId],
    queryFn: () => getLabelsByCard(cardId),
    enabled: !!cardId, // Ch·ªâ fetch khi c√≥ cardId
  });

  useEffect(() => {
    if (!cardId) return;

    const channel = echoInstance.channel(`card.${cardId}`);
    // console.log(`üì° ƒêang l·∫Øng nghe k√™nh: card.${cardId}`);

    channel.listen(".label.updated", (event) => {
      console.log("üì° Nh·∫≠n s·ª± ki·ªán Label Updated:", event);

      queryClient.setQueryData(["labels", cardId], (oldLabels) => {
        if (!oldLabels) return event.labels; // N·∫øu ch∆∞a c√≥ data c≈©, c·∫≠p nh·∫≠t lu√¥n

        return [...event.labels]; // G√°n danh s√°ch labels m·ªõi t·ª´ s·ª± ki·ªán
      });

      queryClient.invalidateQueries({
        queryKey: ["cardLabels", cardId],
        exact: true,
      });

      queryClient.invalidateQueries({ queryKey: ["labels"] });
    });

    return () => {
      channel.stopListening(".label.updated");
      echoInstance.leave(`card.${cardId}`);
      // console.log(`üõë Ng·ª´ng l·∫Øng nghe k√™nh: card.${cardId}`);
    };
  }, [cardId, queryClient]);

  return labelCard;
};
// th√™m v√† x√≥a nh√£n kh·ªèi th·∫ª
export const useUpdateCardLabel = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ cardId, labelId, action }) =>
      updateCardLabel(cardId, labelId, action),

    onSuccess: (_, { cardId, labelId, action, boardId }) => {
      // queryClient.invalidateQueries({ queryKey: ["cardLabels", cardId] })
      queryClient.invalidateQueries({ queryKey: ["lists"] });
      queryClient.invalidateQueries({
        queryKey: ["cardLabels", cardId],
        exact: true,
      });
    },
  });
};

export const useUpdateLabelName = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ labelId, data }) => updateLabelName(labelId, data), // G·ªçi API c·∫≠p nh·∫≠t t√™n label
    onSuccess: (_, { boardId }) => {
      // Invalidate l·∫°i d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t UI
      queryClient.invalidateQueries({
        queryKey: ["labels", boardId],
        exact: true,
      });
      queryClient.invalidateQueries({ queryKey: ["lists"] });
    },
    onError: (error) => {
      console.error(
        "‚ùå L·ªói khi c·∫≠p nh·∫≠t t√™n nh√£n:",
        error.response?.data || error.message
      );
    },
  });
};

export const useDeleteLabelByBoard = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ labelId }) => deleteLabelByBoard(labelId),
    onSuccess: (_, variables) => {
      const { boardId, cardId } = variables || {};
      queryClient.invalidateQueries({ queryKey: ["lists"] });

      if (boardId) {
        queryClient.invalidateQueries({
          queryKey: ["labels", boardId],
          exact: true,
        });
      }

      if (cardId) {
        queryClient.invalidateQueries({
          queryKey: ["cardLabels", cardId],
          exact: true,
        });
      }
    },
    onError: (error) => {
      console.error(
        "‚ùå L·ªói khi x√≥a nh√£n:",
        error.response?.data || error.message
      );
    },
  });
};
