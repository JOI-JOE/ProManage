import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  createCard,
  getCardById,
  updateDescription,
  updateCardTitle,
  updateArchivedCard,
  deleteCard,
  getCardArchivedByBoard,
  getMemberInCard,
  toggleCardMember,
  updatePositionCard,
  updateCardDate,
  getDateByCard,
  addMemberToCard,
  removeMember,
} from "../api/models/cardsApi";
import { useEffect, useMemo } from "react";
import { toast } from "react-toastify";
import echoInstance from "./realtime/useRealtime";

export const useCreateCard = () => {
  return useMutation({
    mutationFn: createCard,
    onError: (error) => {
      console.error("‚ùå L·ªói khi t·∫°o th·∫ª:", error);
    },
  });
};

export const useUpdateCardPosition = () => {
  const queryClient = useQueryClient(); // Kh·ªüi t·∫°o queryClient

  return useMutation({
    mutationFn: async ({ cardId, listId, position }) => {
      return await updatePositionCard({ cardId, listId, position });
    },
    retry: 3,
    retryDelay: 1000, // Th·ª≠ l·∫°i sau 1 gi√¢y n·∫øu l·ªói
  });
};

export const useCardById = (cardId) => {
  const queryClient = useQueryClient();

  const cardDetail = useQuery({
    queryKey: ["cards", cardId],
    queryFn: () => getCardById(cardId),

    staleTime: 1000 * 60 * 5, // 5 ph√∫t.
    cacheTime: 1000 * 60 * 30, // 30 ph√∫t.
    enabled: !!cardId,
    onSuccess: () => {
      queryClient.invalidateQueries(["cards"]);
    },
  });

  useEffect(() => {
    if (!cardId || !echoInstance) return;

    const channel = echoInstance.channel(`card.${cardId}`);
    // console.log(`üì° ƒêang l·∫Øng nghe k√™nh: card.${cardId}`);

    channel.listen(".card.updated", (event) => {


      if (event?.card?.id === cardId) {
        queryClient.setQueryData(["cards", cardId], (oldData) => {
          if (!oldData) return oldData;

          // console.log("üîÑ C·∫≠p nh·∫≠t d·ªØ li·ªáu card:", { ...oldData, title: event.card.title });

          return { ...oldData, title: event.card.title };
        });
      }
    });

    channel.listen(".card.description.updated", (event) => {


      if (event?.card?.id === cardId) {
        queryClient.setQueryData(["cards", cardId], (oldData) => {
          if (!oldData) return oldData;
          console.log("üîÑ C·∫≠p nh·∫≠t m√¥ t·∫£ card:", event.card.description);
          return { ...oldData, description: event.card.description };
        });
      }
    });

    return () => {
      channel.stopListening(".card.updated");
      channel.stopListening(".card.description.updated");
      echoInstance.leave(`card.${cardId}`);
    };
  }, [cardId, queryClient]);

  const updateDescriptionMutation = useMutation({
    mutationFn: (description) => updateDescription(cardId, description), // G·ªçi API c·∫≠p nh·∫≠t m√¥ t·∫£
    onSuccess: (data, {cardId}) => {
      console.log("M√¥ t·∫£ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:", data);

      queryClient.invalidateQueries({ queryKey: ["cardDetail", cardId], exact: true });
      queryClient.invalidateQueries({ queryKey: ["lists"] });
    },
    onError: (error) => {
      console.error("L·ªói khi c·∫≠p nh·∫≠t m√¥ t·∫£:", error);
    },
  });

  const memoizedReturnValue = useMemo(
    () => ({
      ...cardDetail,
      updateDescriptionCard: updateDescriptionMutation.mutate,
    }),
    [cardDetail, updateDescriptionMutation.mutate]
  );

  return memoizedReturnValue;
};

export const useUpdateCardTitle = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ cardId, title }) => updateCardTitle(cardId, title),
    onSuccess: (data, variables) => {
      // C·∫≠p nh·∫≠t d·ªØ li·ªáu card trong cache sau khi update th√†nh c√¥ng
      queryClient.invalidateQueries({ queryKey: ["cards", variables.cardId] });
      queryClient.invalidateQueries({ queryKey: ["lists"] });
    },
    onError: (error) => {
      console.error("L·ªói khi c·∫≠p nh·∫≠t t√™n card:", error);
    },
  });
};

export const useCardActions = (boardId) => {
  const queryClient = useQueryClient();

  // L·∫•y danh s√°ch card ƒë√£ l∆∞u tr·ªØ theo board
  const {
    data: cards,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["cardsArchivedByBoard", boardId],
    queryFn: () => getCardArchivedByBoard(boardId),
    enabled: !!boardId, // Ch·ªâ fetch khi c√≥ boardId
  });

  useEffect(() => {
    if (!boardId || !echoInstance) return;

    const channel = echoInstance.channel(`boards.${boardId}`);
    // console.log(`üì° ƒêang l·∫Øng nghe k√™nh: card.${cardId}`);


    channel.listen(".CardArchiveToggled", (data) => {
      // console.log('Realtime archive changed: ', data);

      queryClient.invalidateQueries(["lists"]);

    });
    channel.listen(".CardDelete", (data) => {
      // console.log('Realtime archive changed: ', data);

      queryClient.invalidateQueries(["lists"]);

    });

    return () => {
      channel.stopListening(".CardArchiveToggled");
      channel.stopListening(".CardDelete");
      echoInstance.leave(`boards.${boardId}`);
    };
  }, [boardId, queryClient]);



  // Mutation l∆∞u tr·ªØ card
  const archiveCard = useMutation({
    mutationFn: updateArchivedCard,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["cardsArchivedByBoard"], exact: true });
      queryClient.invalidateQueries(["lists"]);
      toast.success("ƒê·ªïi tr·∫°ng th√°i th·∫ª th√†nh c√¥ng!");
    },
    onError: (error) => {
      toast.error(`L·ªói l∆∞u tr·ªØ: ${error.message}`);
    },
  });

  // Mutation x√≥a card
  const deleteCardMutation = useMutation({
    mutationFn: deleteCard,
    onSuccess: () => {
      queryClient.invalidateQueries(["cardsArchivedByBoard"]);
      toast.success("X√≥a th·∫ª th√†nh c√¥ng!");
    },
    onError: (error) => {
      toast.error(`L·ªói x√≥a th·∫ª: ${error.message}`);
    },
  });

  return {
    cards,
    isLoading,
    error,
    archiveCard: archiveCard.mutate, // G·ªçi mutate tr·ª±c ti·∫øp
    deleteCard: deleteCardMutation.mutate, // G·ªçi mutate tr·ª±c ti·∫øp
  };
};

export const useGetMemberInCard = (cardId) => {
  const queryClient = useQueryClient();

  // Fetch danh s√°ch th√†nh vi√™n
  const membersQuery = useQuery({
    queryKey: ["membersInCard", cardId],
    queryFn: () => getMemberInCard(cardId),
    staleTime: 1000 * 60 * 5, // 5 ph√∫t.
    cacheTime: 1000 * 60 * 30, // 30 ph√∫t.
    enabled: !!cardId, // Ch·ªâ g·ªçi API khi c√≥ cardId h·ª£p l·ªá.
  });

  useEffect(() => {
    if (!cardId || !echoInstance) return;

    const channel = echoInstance.channel(`card.${cardId}`);
    // console.log(`üì° ƒêang l·∫Øng nghe k√™nh: card.${cardId}`);

    channel.listen(".CardMemberUpdated", (event) => {
      if (event?.card?.id === cardId) {
        // console.log(`üë• Th√†nh vi√™n ${event.action}:`, event.user.full_name);


        // queryClient.invalidateQueries({ queryKey: ["cards", cardId] });
        // queryClient.invalidateQueries({ queryKey: ["membersInCard", cardId] }); // Fetch l·∫°i sau khi API th√†nh c√¥ng
        queryClient.invalidateQueries({ queryKey: ["card", cardId], exact: true });
        queryClient.invalidateQueries({ queryKey: ["membersInCard", cardId] });
        queryClient.invalidateQueries({ queryKey: ["activities"] });
        queryClient.invalidateQueries({ queryKey: ["lists"] });

      }
    });

    return () => {
      channel.stopListening(".CardMemberUpdated");
      echoInstance.leave(`card.${cardId}`);
    };
  }, [cardId, queryClient]);


  // Mutation ƒë·ªÉ th√™m/x√≥a th√†nh vi√™n
  const mutation = useMutation({
    mutationFn: (userId) => toggleCardMember(cardId, userId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["card", cardId], exact: true });
      queryClient.invalidateQueries({ queryKey: ["membersInCard", cardId] });
      queryClient.invalidateQueries({ queryKey: ["activities"] });
      queryClient.invalidateQueries({ queryKey: ["lists"] });
    },
  });





  return { ...membersQuery, toggleMember: mutation.mutate };
};
export const useCardSchedule = (targetId) => {
  const queryClient = useQueryClient();

  return useQuery({
    queryKey: ["cardSchedule", targetId],
    queryFn: () => getDateByCard(targetId),
    enabled: !!targetId, // Ch·ªâ g·ªçi API n·∫øu cardId t·ªìn t·∫°i
  
  });
};
export const useUpdateCardDate = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ targetId, startDate, endDate, endTime, reminder }) =>
      updateCardDate(targetId, startDate, endDate, endTime, reminder),
    onSuccess: (data, variables) => {
     
      // queryClient.invalidateQueries(["cardSchedule"],variables.cardId);
      queryClient.invalidateQueries({ queryKey: ["cardSchedule", variables.targetId], exact: true });
    },
    onError: (error) => {
      console.error("L·ªói khi c·∫≠p nh·∫≠t ng√†y card:", error);
    },
  });
};
