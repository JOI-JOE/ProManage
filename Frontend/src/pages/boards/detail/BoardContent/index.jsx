import { Box } from "@mui/material";
import ListColumns from "./ListColumns/ListColumns";
import Column from "./ListColumns/Column/Column";
import C_ard from "./ListColumns/Column/ListCards/Card/Card";
import { mapOrder } from "../../../../../utils/sort";

import { cloneDeep, isEmpty } from "lodash";
import {
  DndContext,
  MouseSensor,
  // PointerSensor,
  TouchSensor,
  useSensor,
  useSensors,
  DragOverlay,
  defaultDropAnimationSideEffects,
  closestCorners,
  pointerWithin,
  // rectIntersection,
  getFirstCollision,
  // closestCenter,
} from "@dnd-kit/core";
import '../../../../../utils/pusher';
import { arrayMove } from "@dnd-kit/sortable";
// import { useCallback, useEffect, useRef, useState } from "react";
import { generatePlaceholderCard } from "../../../../../utils/formatters";
import { useParams } from 'react-router-dom';
import { useLists } from "../../../../hooks/useList";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect, useState } from 'react';


// import { updateListPositions } from "../api/lists";

const ACTIVE_DRAG_ITEM_TYPE = {
  COLUMN: "ACTIVE_DRAG_ITEM_TYPE_COLUMN",
  CARD: "ACTIVE_DRAG_ITEM_TYPE_CARD",
};

const BoardContent = ({ }) => {

  const { boardId } = useParams();
  // console.log("boardId:", boardId); // Ki·ªÉm tra gi√° tr·ªã boardId
  const [orderedColumns, setOrderedColumns] = useState([]);

  const { data: lists, isLoading, error, reorderLists } = useLists(boardId);
  console.log("üõ† list:", lists);

  // console.log("üõ† boardId:", boardId);

  const queryClient = useQueryClient();

  // Ki·ªÉm tra tr·∫°ng th√°i khi g·ªçi API
  if (isLoading) return <p>ƒêang t·∫£i danh s√°ch...</p>;
  if (error) return <p>L·ªói: {error.message}</p>;

  // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
  // if (!lists || lists.length === 0) return <p>Kh√¥ng c√≥ danh s√°ch n√†o.</p>;


  // useEffect(() => {
  //   // S·ª≠ d·ª•ng Echo ƒë·ªÉ k·∫øt n·ªëi v√† l·∫Øng nghe s·ª± ki·ªán
  //   const channel = window.Echo.channel(`board.${boardId}`);
  //   channel.listen('.list.reordered', (event) => {
  //     // C·∫≠p nh·∫≠t danh s√°ch t·ª´ s·ª± ki·ªán Echo
  //     const newListPositions = event.positions.sort((a, b) => a.position - b.position);
  //     setOrderedColumns(newListPositions);
  //   });

  //   // Cleanup khi component unmount
  //   return () => {
  //     channel.stopListening('.list.reordered');
  //     channel.unsubscribe();
  //   };
  // }, [boardId]);


  // const [lists, setLists] = useState([]);

  // const mouseSensor = useSensor(MouseSensor, {
  //   activationConstraint: { distance: 10 },
  // });

  // const touchSensor = useSensor(TouchSensor, {
  //   activationConstraint: { delay: 250, tolerance: 5 },
  // });

  // const sensors = useSensors(mouseSensor, touchSensor);

  // const [orderedColumns, setOrderedColumns] = useState([]);

  // const [activeDragItemId, setActiveDragItemId] = useState(null);
  // const [activeDragItemType, setActiveDragItemType] = useState(null);
  // const [activeDragItemData, setActiveDragItemData] = useState(null);
  // const [oldColumnDraggingCard, setOldColumnDraggingCard] = useState(null);

  // const lastOverId = useRef(null);

  // useEffect(() => {
  //   setOrderedColumns(mapOrder(board?.columns, board?.columnOrderIds, "_id"));
  // }, [board]);

  //T√¨m column theo cardId
  const findColumnByCardId = (cardId) => {
    return orderedColumns.find((column) =>
      column?.cards?.map((card) => card._id)?.includes(cardId)
    );
  };

  //C·∫≠p nh·∫≠t l·∫°i State khi di chuy·ªÉn Card gi·ªØa c√°c Column kh√°c nhau
  const moveCardBetweenDifferentColumns = (
    overColumn,
    overCardId,
    active,
    over,
    activeColumn,
    activeCardId,
    activeCardData
  ) => {
    setOrderedColumns((prevColumns) => {
      //T√¨m v·ªã tr√≠ c·ªßa overCard trong column s·∫Øp ƒë∆∞·ª£c th·∫£
      const overCardIndex = overColumn?.cards?.findIndex(
        (card) => card._id === overCardId
      );

      // T√≠nh to√°n v·ªã tr√≠ cardIndex m·ªõi
      let newCardIndex;
      const isBelowOverItem =
        active.rect.current.translated &&
        active.rect.current.translated.top > over.rect.top + over.rect.height;

      const modifier = isBelowOverItem ? 1 : 0;
      newCardIndex =
        overCardIndex >= 0 ? overCardIndex + modifier : overColumn?.length + 1;

      //Clone m·∫£ng orderedColumns c≈© ra ƒë·ªÉ x·ª≠ l√Ω data r·ªìi return c·∫≠p nh·∫≠p l·∫°i orderedColumns m·ªõi
      const nextColumns = cloneDeep(prevColumns);
      const nextActiveColumn = nextColumns.find(
        (column) => column._id === activeColumn._id
      );
      const nextOverColumn = nextColumns.find(
        (column) => column._id === overColumn._id
      );

      if (nextActiveColumn) {
        //X√≥a card ·ªü column c≈© khi k√©o sang column m·ªõi
        nextActiveColumn.cards = nextActiveColumn.cards.filter(
          (card) => card._id !== activeCardId
        );

        if (isEmpty(nextActiveColumn.cards)) {
          nextActiveColumn.cards = [generatePlaceholderCard(nextActiveColumn)];
        }

        // C·∫≠p nh·∫≠t l·∫°i m·∫£ng cardOrderIds m·ªõi
        nextActiveColumn.cardOrderIds = nextActiveColumn.cards.map(
          (card) => card._id
        );
      }

      //nextOverColumn: Column m·ªõi
      if (nextOverColumn) {
        // Ki·ªÉm tra card ƒëang k√©o t·ªìn t·∫°i ·ªü overColumn ch∆∞a, n·∫øu c√≥ th√¨ x√≥a tr∆∞·ªõc
        nextOverColumn.cards = nextOverColumn.cards.filter(
          (card) => card._id !== activeCardId
        );

        const rebuild_activeCardData = {
          ...activeCardData,
          columnId: nextOverColumn._id,
        };

        // Th√™m card ƒëang k√©o v√†o v·ªã tr√≠ m·ªõi c·ªßa column m·ªõi
        nextOverColumn.cards = nextOverColumn.cards.toSpliced(
          newCardIndex,
          0,
          rebuild_activeCardData
        );

        nextOverColumn.cards = nextOverColumn.cards.filter(
          (card) => !card.FE_PlaceholderCard
        );

        // C·∫≠p nh·∫≠t l·∫°i m·∫£ng
        nextOverColumn.cardOrderIds = nextOverColumn.cards.map(
          (card) => card._id
        );
      }
      console.log("nextColumns:", nextColumns);

      return nextColumns;
    });
  };

  //B·∫Øt ƒë·∫ßu k√©o m·ªôt ph·∫ßn t·ª≠
  // const handleDragStart = (event) => {
  //   // console.log("handleDragStart:", event);
  //   setActiveDragItemId(event?.active?.id);

  //   setActiveDragItemType(
  //     event?.active?.data?.current?.columnId
  //       ? ACTIVE_DRAG_ITEM_TYPE.CARD
  //       : ACTIVE_DRAG_ITEM_TYPE.COLUMN
  //   );

  //   setActiveDragItemData(event?.active?.data?.current);

  //   //N·∫øu k√©o Card th√¨ m·ªõi set gi√° tr·ªã oldColumn
  //   if (event?.active?.data?.current?.columnId) {
  //     setOldColumnDraggingCard(findColumnByCardId(event?.active?.id));
  //   }
  // };

  // Trong qu√° tr√¨nh k√©o m·ªôt ph·∫ßn t·ª≠
  // const handleDragOver = (event) => {
  //   //K l√†m g√¨ n·∫øu k√©o column
  //   if (activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN) {
  //     return;
  //   }
  //   //console.log("handleDragOver:", event);

  //   const { active, over } = event;
  //   //K t·ªìn t·∫°i active ho·∫∑c over th√¨ k l√†m g√¨
  //   if (!active || !over) return;

  //   const {
  //     id: activeCardId, //activeCard: Card ƒëang ƒë∆∞·ª£c k√©o
  //     data: { current: activeCardData }, //current: activeCardData: L√† active.data.current
  //   } = active;
  //   const { id: overCardId } = over; //overCard: L√† card ƒëang t∆∞∆°ng t√°c tr√™n, d∆∞·ªõi v·ªõi card ƒëang ƒë∆∞·ª£c k√©o

  //   //T√¨m column theo cardId
  //   const activeColumn = findColumnByCardId(activeCardId);
  //   const overColumn = findColumnByCardId(overCardId);

  //   if (!activeColumn || !overColumn) return;

  //   //Card di chuy·ªÉn gi·ªØa 2 column kh√°c nhau m·ªõi ch·∫°y v√†o ƒë√¢y c√≤n trong 1 column th√¨ k. X·ª≠ l√Ω l√∫c k√©o onDragOver
  //   if (activeColumn._id !== overColumn._id) {
  //     moveCardBetweenDifferentColumns(
  //       overColumn,
  //       overCardId,
  //       active,
  //       over,
  //       activeColumn,
  //       activeCardId,
  //       activeCardData
  //     );
  //   }
  // };

  // K·∫øt th√∫c k√©o m·ªôt ph·∫ßn t·ª≠
  const handleDragEnd = async (event) => {
    const { active, over } = event;
    if (!active || !over || active.id === over.id) return;

    const oldIndex = lists.findIndex((list) => list.id === Number(active.id));
    const newIndex = lists.findIndex((list) => list.id === Number(over.id));
    if (oldIndex === -1 || newIndex === -1) return;

    const updatedLists = arrayMove(lists, oldIndex, newIndex);

    const updatedPositions = updatedLists.map((list, index) => ({
      id: list.id,
      position: index + 1, // C·∫≠p nh·∫≠t v·ªã tr√≠ m·ªõi
    }));


    console.log("üõ† D·ªØ li·ªáu g·ª≠i l√™n API:", {
      board_id: boardId,
      positions: updatedPositions
  });

    // C·∫≠p nh·∫≠t v·ªã tr√≠ tr√™n server
    try {
      await reorderLists({ boardId, updatedPositions });
      console.log("‚úÖ C·∫≠p nh·∫≠t v·ªã tr√≠ th√†nh c√¥ng");
    } catch (error) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t v·ªã tr√≠:", error);
    }
  };


  const customDropAnimation = {
    sideEffects: defaultDropAnimationSideEffects({
      styles: {
        active: {
          opacity: "0.5",
        },
      },
    }),
  };

  //S·ª≠ l√Ω va ch·∫°m khi k√©o th·∫£
  // const collisionDetectionStrategy = useCallback(
  //   (args) => {
  //     if (activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN) {
  //       return closestCorners({ ...args });
  //     }
  //     //T√¨m c√°c ƒëi·ªÉm giao nhau, va ch·∫°m
  //     const pointerIntersections = pointerWithin(args);
  //     if (!pointerIntersections?.length) return;

  //     // THu·∫≠t to√°n ph√°t hi·ªán va ch·∫°m => Tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c va ch·∫°m
  //     // const intersections = !!pointerIntersections?.length
  //     //   ? pointerIntersections
  //     //   : rectIntersection(args);

  //     let overId = getFirstCollision(pointerIntersections, "id");

  //     if (overId) {
  //       const checkColumn = orderedColumns.find(
  //         (column) => column._id === overId
  //       );
  //       if (checkColumn) {
  //         overId = closestCorners({
  //           ...args,
  //           droppableContainers: args.droppableContainers.filter(
  //             (container) => {
  //               return (
  //                 container.id !== overId &&
  //                 checkColumn?.cardOrderIds?.includes(container.id)
  //               );
  //             }
  //           ),
  //         })[0]?.id;
  //       }
  //       lastOverId.current = overId;
  //       return [{ id: overId }];
  //     }

  //     // overId l√† null tr·∫£ v·ªÅ m·∫£ng r·ªóng
  //     return lastOverId.current ? [{ id: lastOverId.current }] : [];
  //   },
  //   [activeDragItemType, orderedColumns]
  // );

  return (
    <DndContext
    // onDragStart={handleDragStart}
    // onDragOver={handleDragOver}
    onDragEnd={handleDragEnd}
    // sensors={sensors}
    //collisionDetection={closestCorners}
    // collisionDetection={collisionDetectionStrategy}
    >
      <Box
        sx={{
          backgroundColor: "primary.main",
          height: (theme) => theme.trello.boardContentHeight,
          padding: "18px 0 7px 0px",
        }}
      >
        <ListColumns lists={lists} />
        {/* <DragOverlay dropAnimation={customDropAnimation}>
          {!activeDragItemType && null}
          {activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN && (
            <Column column={activeDragItemData} />
          )}
          {activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.CARD && (
            <C_ard card={activeDragItemData} />
          )}
        </DragOverlay> */}
      </Box>
    </DndContext>
  );
};

export default BoardContent;

