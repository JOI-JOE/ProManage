

import React, { useCallback, useContext, useMemo, useState } from "react";
import { Link, useNavigate, useParams } from "react-router-dom";
import {
  Box,
  Drawer,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Typography,
  Avatar,
  Collapse,
  IconButton,
  Menu,
  MenuItem,
  Popover,
  Grid,
  TextField,
  Select,
  Button,
  ListSubheader,
} from "@mui/material";
import DashboardIcon from "@mui/icons-material/Dashboard";
import LockIcon from "@mui/icons-material/Lock";
import GroupsIcon from "@mui/icons-material/Groups";
import PublicIcon from "@mui/icons-material/Public";
import PeopleIcon from "@mui/icons-material/People";
import SettingsIcon from "@mui/icons-material/Settings";
import UpgradeIcon from "@mui/icons-material/Upgrade";
import ViewKanbanIcon from "@mui/icons-material/ViewKanban";
import AddIcon from "@mui/icons-material/Add";
import ExpandLess from "@mui/icons-material/ExpandLess";
import ExpandMore from "@mui/icons-material/ExpandMore";
import FolderIcon from "@mui/icons-material/Folder";
import CalendarMonthIcon from "@mui/icons-material/CalendarMonth";
import WorkspaceContext from "../../../../contexts/WorkspaceContext";
import MoreVertIcon from "@mui/icons-material/MoreVert";
import ExitToAppIcon from "@mui/icons-material/ExitToApp";
import CloseIcon from "@mui/icons-material/Close";
import { useCreateBoard, useImageUnsplash, useToggleBoardClosed } from "../../../../hooks/useBoard";
import { useGetBoardMembers, useGuestBoards } from "../../../../hooks/useInviteBoard";
import { useCheckMemberInWorkspace, useGetWorkspaces } from "../../../../hooks/useWorkspace";
import { useUser } from "../../../../hooks/useUser";
import { createBoard } from "../../../../api/models/boardsApi";
import { useColor } from "../../../../hooks/useColor";

const SideBar = () => {
  const { boardId } = useParams();
  const { data: user } = useUser();
  // console.log(boardId);
  const { data: guestBoards } = useGuestBoards();
  // console.log(guestBoards);
  const { currentWorkspace } = useContext(WorkspaceContext);
  const { data: boardMembers = [] } = useGetBoardMembers(boardId);


  const currentUserId = user?.id;

  const isMember = Array.isArray(boardMembers?.data)
    ? boardMembers.data.some(member =>
      member.id === currentUserId && member.pivot.role === "member"
    )
    : false;


  const adminCount = boardMembers?.data?.filter((m) => m.pivot.role === "admin").length;
  // console.log(adminCount);

  // useMemberJoinedListener(user?.id)



  const foundWorkspace = guestBoards?.find((workspace) =>
    workspace.boards.some((board) => board.id === boardId)
  );

  const { data: checkMember } = useCheckMemberInWorkspace(foundWorkspace?.workspace_id, user?.id);
  // console.log(foundWorkspace);

  let isGuest = false;
  if (foundWorkspace) {
    isGuest = true;
  }
  // console.log(isGuest);

  // const activeData = foundWorkspace || currentWorkspace;

  const [openSettings, setOpenSettings] = useState(false);
  // const invitedWorkspace = currentWorkspace?.boards?.some(board => board.id == boardId) ? currentWorkspace : null;
  // console.log(invitedWorkspace);

  // console.log(currentWorkspace);
  const toggleSettings = () => {
    setOpenSettings(!openSettings);
  };

  const [menuAnchor, setMenuAnchor] = useState(null);
  const [selectedBoardId, setSelectedBoardId] = useState(null);
  const [boardTitle, setBoardTitle] = useState("");
  const [selectedBg, setSelectedBg] = useState("");
  const [workspace, setWorkspace] = useState("");
  const [viewPermission, setViewPermission] = useState("");

  const { data: workspaces, isLoading: isLoadingWorkspaces, error } = useGetWorkspaces();
  const memoizedWorkspaces = useMemo(() => workspaces ?? [], [workspaces]);

  const { data: colors, isLoading: isLoadingColors, errorColors } = useColor();

  const { mutate: createBoard, isLoading: isCreatingBoard } = useCreateBoard();

  const handleMenuOpen = (event, boardId) => {
    setMenuAnchor(event.currentTarget);
    setSelectedBoardId(boardId);
  };

  const handleMenuClose = () => {
    setMenuAnchor(null);
    setSelectedBoardId(null);
  };

  const { mutate: toggleBoardClosed } = useToggleBoardClosed(); // Use hook

  const handleCloseBoard = (boardId) => {
    toggleBoardClosed(boardId); // G·ªçi hook ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i ƒë√≥ng b·∫£ng
    handleMenuClose();
  };
  const [openPopover, setOpenPopover] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);

  const {
    mutate: fetchUnsplashImages,
    data: unsplashImages,
    isLoading: unsplashingImages,
  } = useImageUnsplash();

  const handleOpen = (event) => {
    setAnchorEl(event.currentTarget);
    setOpenPopover(true);
    fetchUnsplashImages(); // G·ªçi API l·∫•y ·∫£nh
  };


  const handleClose = () => {
    setOpenPopover(false);
    setAnchorEl(null);
  };

  const handleSelectBg = (bg) => {
    setSelectedBg(bg); // N·∫øu l√† m√£ m√†u, g√°n tr·ª±c ti·∫øp
  };

  const handleCreateBoard = useCallback(() => {
    if (!boardTitle.trim()) {
      alert("Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ b·∫£ng!");
      return;
    }

    const boardData = {
      name: boardTitle,
      thumbnail: selectedBg,
      workspace_id: workspace,
      visibility: viewPermission,
    };

    createBoard(boardData, {
      onSuccess: (data) => {
        console.log(data);
        // alert(`üéâ B·∫£ng "${boardTitle}" ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!`);
        handleClose();
      },
      onError: (error) => {
        alert(`‚ùå L·ªói khi t·∫°o b·∫£ng: ${error.message}`);
      },
    });

    console.log("üì© D·ªØ li·ªáu g·ª≠i l√™n API:", boardData);
  }, [boardTitle, selectedBg, workspace, viewPermission, createBoard, handleClose]);


  return (
    <Drawer
      variant="permanent"
      sx={{
        width: "19%",
        height: (theme) =>
          `calc( ${theme.trello.boardContentHeight} + ${theme.trello.boardBarHeight} )`,
        borderTop: "1px solid #ffffff",
        "& .MuiDrawer-paper": {
          boxSizing: "border-box",
          bgcolor: "#000",
          color: "#ffffff",
          position: "relative",
          overflowY: "auto",
          "&::-webkit-scrollbar": { width: "6px" },
          "&::-webkit-scrollbar-thumb": {
            backgroundColor: "#B6BBBF",
            borderRadius: "6px",
          },
          "&::-webkit-scrollbar-thumb:hover": { backgroundColor: "#ECF0F1" },
          "&::-webkit-scrollbar-track": { m: 2 },
        },
      }}
    >
      <Box
        sx={{
          display: "flex",
          alignItems: "center",
          gap: 2,
          p: 2,
          bgcolor: "#292929",
        }}
      >
        <Avatar sx={{ bgcolor: "#5D87FF" }}>K</Avatar>
        <Box>
          <Typography variant="body1" sx={{ fontWeight: "bold" }}>
            {isGuest
              ? foundWorkspace?.workspace_name
              : currentWorkspace?.display_name}
          </Typography>
        </Box>
      </Box>

      {!isGuest && (
        <List>
          <ListItem disablePadding>
            <ListItemButton
              component={Link}
              to={`/w/${currentWorkspace?.name}`}
            >
              <ListItemIcon sx={{ color: "white" }}>
                <DashboardIcon />
              </ListItemIcon>
              <ListItemText primary="B·∫£ng" />
            </ListItemButton>
          </ListItem>

          <ListItem disablePadding>
            <ListItemButton
              component={Link}
              to={`/w/${currentWorkspace?.name}/members`}
            >
              <ListItemIcon sx={{ color: "white" }}>
                <PeopleIcon />
              </ListItemIcon>
              <ListItemText primary="Th√†nh vi√™n" />
              <AddIcon sx={{ color: "gray" }} />
            </ListItemButton>
          </ListItem>

          <ListItemButton onClick={toggleSettings}>
            <ListItemIcon sx={{ color: "white" }}>
              <SettingsIcon />
            </ListItemIcon>
            <ListItemText primary="C√†i ƒë·∫∑t Kh√¥ng gian l√†m vi·ªác" />
            {openSettings ? <ExpandLess /> : <ExpandMore />}
          </ListItemButton>

          <Collapse in={openSettings} timeout="auto" unmountOnExit>
            <List component="div" disablePadding>
              <ListItemButton sx={{ pl: 4 }}>
                <ListItemIcon sx={{ color: "white" }}>
                  <ViewKanbanIcon />
                </ListItemIcon>
                <ListItemText
                  component={Link}
                  to={`/w/${currentWorkspace?.name}/account`}
                  primary="C√†i ƒë·∫∑t kh√¥ng gian l√†m vi·ªác"
                />
              </ListItemButton>
              <ListItemButton sx={{ pl: 4 }}>
                <ListItemIcon sx={{ color: "white" }}>
                  <UpgradeIcon />
                </ListItemIcon>
                <ListItemText primary="N√¢ng c·∫•p kh√¥ng gian l√†m vi·ªác" />
              </ListItemButton>
            </List>
          </Collapse>
        </List>
      )}

      {!isGuest && (
        // <Box sx={{ width: 250, height: "100vh" }}>
          <List>
            {/* C√°c m·ª•c kh√°c trong sidebar (n·∫øu c√≥) */}

            {/* Nh√≥m "Xem kh√¥ng gian l√†m vi·ªác" */}
            {!isGuest && (
              <Box>
                <ListSubheader
                  sx={{
                    bgcolor: "black",
                    color: "white",
                    fontSize: "0.9rem",
                    fontWeight: "bold",
                    pt: 2, // Kho·∫£ng c√°ch ph√≠a tr√™n
                  }}
                >
                  Xem kh√¥ng gian l√†m vi·ªác
                </ListSubheader>

                <ListItem disablePadding>
                  <ListItemButton
                    component={Link}
                    to={`/w/${currentWorkspace?.name}/table-view`}
                  >
                    <ListItemIcon sx={{ color: "white" }}>
                      <DashboardIcon />
                    </ListItemIcon>
                    <ListItemText primary="B·∫£ng" />
                  </ListItemButton>
                </ListItem>

                <ListItem disablePadding>
                  <ListItemButton
                    component={Link}
                    to={`/w/${currentWorkspace?.name}/calendar`}
                  >
                    <ListItemIcon sx={{ color: "white" }}>
                      <CalendarMonthIcon />
                    </ListItemIcon>
                    <ListItemText primary="Calendar" />
                  </ListItemButton>
                </ListItem>
              </Box>
            )}
          </List>
       
      )}
      <Box display="flex" alignItems="center" justifyContent="space-between" sx={{ px: 2, mt: 2 }}>
        <Typography sx={{ fontWeight: 600, fontSize: '15px' }}>
          C√°c b·∫£ng c·ªßa b·∫°n
        </Typography>
        <Box display="flex" alignItems="center" gap={1}>
          {!isMember && (
            <IconButton size="small" onClick={handleOpen}>
              <AddIcon fontSize="small" sx={{ color: '#fff' }} />
            </IconButton>
          )}
        </Box>
      </Box>

      <List sx={{ p: 0.5 }}>
        {(isGuest ? foundWorkspace : currentWorkspace)?.boards
          .filter((board) => board.closed === 0)
          .map((board) => (
            <ListItem
              key={board.id}
              disablePadding
              sx={{ p: 1, display: "flex", alignItems: "center" }}
            >
              {/* Ph·∫ßn t√™n b·∫£ng d·∫´n link */}
              <ListItemButton
                component={Link}
                to={`/b/${board.id}/${board.name}`}
                sx={{
                  flexGrow: 1,
                  backgroundColor:
                    board.id === Number(board.id) ? "#ffffff33" : "transparent",
                  "&:hover": { backgroundColor: "#ffffff22" },
                  borderRadius: "6px",
                }}
              >
                <ListItemIcon sx={{ color: "white" }}>
                  <FolderIcon />
                </ListItemIcon>
                <ListItemText
                  primary={board.name}
                  sx={{
                    whiteSpace: "nowrap",
                    overflow: "hidden",
                    textOverflow: "ellipsis",
                  }}
                />
              </ListItemButton>

              {/* N√∫t ... m·ªü dropdown, t√°ch ri√™ng ho√†n to√†n */}
              <IconButton
                onClick={(e) => handleMenuOpen(e, board.id)}
                sx={{ color: "white", ml: "auto" }}
              >
                <MoreVertIcon />
              </IconButton>

              {/* Dropdown menu c·ªßa t·ª´ng b·∫£ng */}
              <Menu
                anchorEl={menuAnchor}
                open={selectedBoardId === board.id}
                onClose={handleMenuClose}
                anchorOrigin={{ vertical: "bottom", horizontal: "left" }}
                transformOrigin={{ vertical: "top", horizontal: "left" }}
                sx={{
                  "& .MuiPaper-root": {
                    backgroundColor: "#2e2e2e",
                    color: "white",
                    borderRadius: "8px",
                    minWidth: "300px",
                  },
                }}
              >
                <MenuItem
                  disabled
                  sx={{
                    fontWeight: "bold",
                    fontSize: "1rem",
                    opacity: 1,
                    textAlign: "center",
                    justifyContent: "center",
                    color: "#fff",
                    padding: "12px 16px",
                  }}
                >
                  {board.name}
                </MenuItem>

                {(adminCount >= 2 || isMember) && (
                  [
                    {
                      text: "R·ªùi kh·ªèi b·∫£ng",
                      icon: <ExitToAppIcon />,
                      color: "#ff4d4d",
                    },
                  ].map((item, index) => (
                    <MenuItem
                      key={index}
                      onClick={() => console.log(item.text)}
                      sx={{
                        display: "flex",
                        justifyContent: "space-between",
                        padding: "10px 16px",
                        "&:hover": { backgroundColor: item.color, color: "white" },
                      }}
                    >
                      {item.text}
                      {item.icon}
                    </MenuItem>
                  ))
                )}


                {!isMember && (
                  [
                    { text: "ƒê√≥ng b·∫£ng", icon: <CloseIcon />, color: "#ff4d4d" },
                  ].map((item, index) => (
                    <MenuItem
                      key={index}
                      onClick={() => handleCloseBoard(board.id)}
                      sx={{
                        display: "flex",
                        justifyContent: "space-between",
                        padding: "10px 16px",
                        "&:hover": { backgroundColor: item.color, color: "white" },
                      }}
                    >
                      {item.text}
                      {item.icon}
                    </MenuItem>
                  ))
                )}

              </Menu>
            </ListItem>
          ))}
      </List>

      {isGuest && checkMember?.is_member === false && (
        <Box sx={{ p: 2, bgcolor: "#292929", mt: 9.5, borderRadius: "8px" }}>
          <Typography variant="body2" sx={{ fontSize: "13px", color: "#ccc" }}>
            B·∫°n ƒëang l√† Kh√°ch c·ªßa kh√¥ng gian l√†m vi·ªác n√†y, mu·ªën xem th√™m b·∫£ng v√† th√†nh vi√™n kh√°c h√£y g·ª≠i y√™u c·∫ßu cho qu·∫£n tr·ªã vi√™n kh√¥ng gian l√†m vi·ªác n√†y.
          </Typography>
          <Button
            fullWidth
            variant="contained"
            sx={{
              mt: 1,
              bgcolor: "#1976d2",
              color: "white",
              textTransform: "none",
              fontWeight: "bold",
              "&:hover": {
                bgcolor: "#1565c0",
              },
            }}
            onClick={() => {
              // G·ªçi API y√™u c·∫ßu tham gia kh√¥ng gian l√†m vi·ªác ·ªü ƒë√¢y
              console.log("Y√™u c·∫ßu tham gia kh√¥ng gian l√†m vi·ªác");
            }}
          >
            Y√™u c·∫ßu tham gia kh√¥ng gian l√†m vi·ªác
          </Button>
        </Box>
      )}

      <Popover
        open={openPopover}
        anchorEl={anchorEl}
        onClose={handleClose}
        anchorOrigin={{
          vertical: "bottom",
          horizontal: "center",
        }}
        transformOrigin={{
          vertical: "top",
          horizontal: "center",
        }}
      >
        <Box
          sx={{
            width: 350,
            p: 2,
            borderRadius: "8px",
            bgcolor: "white",
            boxShadow: 3,
          }}
        >
          <Typography variant="h6" fontWeight="bold" textAlign="center">
            T·∫°o b·∫£ng
          </Typography>
          {selectedBg && (
            <Box
              sx={{
                width: "100%",
                height: "100px",
                background: selectedBg.startsWith("#")
                  ? selectedBg
                  : `url(${selectedBg}) center/cover no-repeat`,
                borderRadius: "8px",
              }}
            />
          )}

          {/* <Typography variant="subtitle1" mt={2} fontWeight="bold">
            Ph√¥ng n·ªÅn
          </Typography>



          {colors?.length > 0 ? (
            <Grid container spacing={1} mt={1}>
              {colors.map((color) => (
                <Grid item key={color.id}>
                  <Box
                    sx={{
                      width: "50px",
                      height: "35px",
                      backgroundColor: color.hex_code,
                      borderRadius: "4px",
                      cursor: "pointer",
                      border:
                        selectedBg === color.hex_code ? "2px solid #007BFF" : "none",
                    }}
                    onClick={() => handleSelectBg(color.hex_code)}
                  />
                </Grid>
              ))}
            </Grid>
          ) : (
            <Typography>Kh√¥ng c√≥ m√†u n√†o kh·∫£ d·ª•ng</Typography>
          )} */}

          <Typography variant="subtitle1" mt={2} fontWeight="bold">
            ·∫¢nh t·ª´ Unsplash
          </Typography>

          {/* ·∫¢nh t·ª´ Unsplash */}
          <Grid container spacing={1} mt={1}>
            {unsplashImages?.map((image, index) => (
              <Grid item key={index}>
                <Box
                  component="img"
                  src={image.urls.small}
                  sx={{
                    width: "50px",
                    height: "35px",
                    borderRadius: "4px",
                    cursor: "pointer",
                    border:
                      selectedBg === image.urls.small
                        ? "2px solid #007BFF"
                        : "none",
                  }}
                  onClick={() => handleSelectBg(image.urls.small)}
                />
              </Grid>
            ))}
          </Grid>

          <IconButton
            onClick={handleClose}
            sx={{ position: "absolute", top: 8, right: 8 }}
          >
            <CloseIcon />
          </IconButton>

          <Typography variant="h6" mt={2} fontWeight="bold">
            Ti√™u ƒë·ªÅ b·∫£ng <span style={{ color: "red" }}>*</span>
          </Typography>

          <TextField
            fullWidth
            label="Ti√™u ƒë·ªÅ b·∫£ng"
            variant="outlined"
            value={boardTitle}
            onChange={(e) => setBoardTitle(e.target.value)}
            error={boardTitle.trim() === ""}
            helperText={
              boardTitle.trim() === "" ? "üëã Ti√™u ƒë·ªÅ b·∫£ng l√† b·∫Øt bu·ªôc" : ""
            }
            sx={{ marginBottom: 2 }}
          />

          <Typography variant="h6" gutterBottom sx={{ fontWeight: "bold" }}>
            Kh√¥ng gian l√†m vi·ªác
          </Typography>

          {isLoadingWorkspaces ? (
            <Typography>ƒêang t·∫£i...</Typography>
          ) : error ? (
            <Typography color="error">L·ªói t·∫£i workspace</Typography>
          ) : (
            <Select
              fullWidth
              value={workspace}
              onChange={(e) => setWorkspace(e.target.value)}
              sx={{ marginBottom: 2 }}
            >
              {(memoizedWorkspaces ?? []).map((ws) => (
                <MenuItem key={ws.id} value={ws.id}>
                  {ws.name}
                </MenuItem>
              ))}
            </Select>
          )}

          <Typography variant="h6" gutterBottom sx={{ fontWeight: "bold" }}>
            Quy·ªÅn xem
          </Typography>
          <Select
            fullWidth
            value={viewPermission}
            onChange={(e) => setViewPermission(e.target.value)}
            sx={{ marginBottom: 2 }}
          >
            {/* <MenuItem value="default">Kh√¥ng gian l√†m vi·ªác</MenuItem> */}
            <MenuItem value="private">
              <LockIcon fontSize="small" />
              Ri√™ng t∆∞
            </MenuItem>
            <MenuItem value="workspace">
              <GroupsIcon fontSize="small" />
              Kh√¥ng gian l√†m vi·ªác
            </MenuItem>
            <MenuItem value="public">
              <PublicIcon fontSize="small" />
              C√¥ng khai
            </MenuItem>
          </Select>

          <Box sx={{ display: "flex", justifyContent: "center", marginTop: 2 }}>
            <Button
              variant="contained"
              color="primary"
              onClick={handleCreateBoard}
              disabled={isCreatingBoard || boardTitle.trim() === ""}
            >
              {isCreatingBoard ? "ƒêang t·∫°o..." : "T·∫°o b·∫£ng"}
            </Button>
          </Box>
        </Box>
      </Popover>
    </Drawer>


  );
};

export default SideBar;


