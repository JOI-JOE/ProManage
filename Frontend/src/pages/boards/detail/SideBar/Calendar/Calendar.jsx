import React, { useEffect, useRef, useState } from "react";
import FullCalendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";
import timeGridPlugin from "@fullcalendar/timegrid";
import interactionPlugin from "@fullcalendar/interaction";
import { Box } from "@mui/material";
import "./Calendar.css";
import MenuCalendar from "./MenuCalendar/MenuCalendar";
import { useNavigate, useParams } from "react-router-dom";
import { useGetWorkspaceById, useGetWorkspaceByName } from "../../../../../hooks/useWorkspace";
import { useCalendar, useUpdateCardCalendar } from "../../../../../hooks/useCalendar";
import ReactDOM from 'react-dom/client';
import EventCard from "./EventCard";
import { toast } from "react-toastify";
import dayjs from "dayjs";
import viLocale from '@fullcalendar/core/locales/vi';
import { useQueryClient } from "@tanstack/react-query";
import { useToggleCardCompletion } from "../../../../../hooks/useCard";

import isSameOrBefore from "dayjs/plugin/isSameOrBefore";
dayjs.extend(isSameOrBefore);



const Calendar = () => {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const [dateRange, setDateRange] = useState({ start: null, end: null });
  const [visibleMonths, setVisibleMonths] = useState([]);
  const [calendarEvents, setCalendarEvents] = useState([]);
  const [currentMonth, setCurrentMonth] = useState(null);
  const [menuOpen, setMenuOpen] = useState(false);
  const [cardEvents, setCardEvents] = useState([]);
  const { mutate: toggleCardCompletion } = useToggleCardCompletion();
 const { workspaceId } = useParams();
    // const { data, isLoading, error } = useGetWorkspaceByName(workspaceName);
    const {
        data: workspace,
        isLoading: isLoadingWorkspace,
        isError: isWorkspaceError,
        error: workspaceError,
        refetch: refetchWorkspace,
    } = useGetWorkspaceById(workspaceId, {
        enabled: !!workspaceId,
    });
console.log(workspace);

const boardIds = workspace?.boards
  ?.filter(board => !board.closed)
  .map(board => board.id);

  // console.log(boardIds);

  // console.log(dateRange);


  const calendarRef = useRef(null);
  
  const { data: cardcaledar = [], refetch } = useCalendar(boardIds, dateRange.start, dateRange.end);
 
  const { mutate: updateEndDate } = useUpdateCardCalendar();
  

  const handleDatesSet = (arg) => {
    const start = dayjs(arg.start).format("YYYY-MM-DD");
    const end = dayjs(arg.end).format("YYYY-MM-DD");
    // const calendarApi = calendarRef.current?.getApi();
    // if (calendarApi) {
    //   const currentDate = calendarApi.getDate();
    //   const year = currentDate.getFullYear();
    //   const month = (currentDate.getMonth() + 1).toString().padStart(2, "0");
    //   setCurrentMonth(`${year}-${month}`);

    // }
    setDateRange({ start, end });
  };
  const getMonthsBetween = (start, end) => {
    const result = [];
    let current = dayjs(start).startOf("month");
    const last = dayjs(end).startOf("month");

    while (current.isSameOrBefore(last)) {
      result.push(current.format("YYYY-MM"));
      current = current.add(1, "month");
    }
    return result;
  };
  // console.log(getMonthsBetween("2025-03-28", "2025-06-02"));
  // üß™ K·∫øt qu·∫£: ["2025-03", "2025-04", "2025-05", "2025-06"]



  // √Ånh x·∫° d·ªØ li·ªáu s·ª± ki·ªán t·ª´ API
  // import th√™m dayjs


  useEffect(() => {
    if (cardcaledar) {
      const mapped = cardcaledar.map(card => {

        const isAllDay =
          card.start && !card.start.includes("T") &&
          card.end && !card.end.includes("T");

        // N·∫øu l√† all-day th√¨ c·ªông th√™m 1 ng√†y cho end v√¨ fullCalendar ch·ªâ hi·ªÉn th·ªã ƒë·∫øn ng√†y k·∫ø ng√†y k·∫øt th√∫c
        const adjustedEnd = isAllDay && card.end
          ? dayjs(card.end).add(1, "day").format("YYYY-MM-DD")
          : card.end;

        return {
          id: card.id,
          title: card.title,
          start: card.start,
          end: adjustedEnd,
          allDay: isAllDay, // B·∫ÆT BU·ªòC PH·∫¢I TH√äM N√ÄY
          extendedProps: {
            labels: card.labels,
            members: card.members,
            board_id: card.board_id,
            board_name: card.board_name,
            is_completed: card.is_completed // ‚úÖ th√™m d√≤ng n√†y
          }
        };
      });
      // console.log("üß© Mapped events g·ª≠i v√†o FullCalendar:", mapped);
      setCardEvents(mapped);
    }
  }, [cardcaledar]);





  // C·∫≠p nh·∫≠t UI khi k√©o th·∫£ s·ª± ki·ªán
  const handleEventChange = (info) => {
    const updatedEventId = info.event.id;// l·∫•y id t·ª´ event
    const originalStartDate = info.oldEvent.startStr; // Ng√†y ban ƒë·∫ßu tr∆∞·ªõc khi k√©o
    const newStartDate = info.event.startStr;
    const rawEndDate = info.event.endStr || newStartDate;
    const newEndDate = dayjs(rawEndDate).subtract(1, "day").format("YYYY-MM-DD");
    updateEndDate(
      { cardId: updatedEventId, start_date: newStartDate, end_date: newEndDate },
      {
        onSuccess: () => {
          // refetch();

          // Invalidate query d·ª±a tr√™n dateRange.start v√† dateRange.end
          queryClient.invalidateQueries({ 
            queryKey: ["calendar", boardIds, dateRange.start, dateRange.end] 
          });
        },
        onError: (error) => {
          info.revert(); // Quay l·∫°i v·ªã tr√≠ c≈© n·∫øu l·ªói
          toast.error(error.response?.data?.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i");
        },
      }
    );
  };

  const handleToggleComplete = (info) => {
    const cardId = info.event.id;
    const startDate = info.event.startStr; // Ng√†y b·∫Øt ƒë·∫ßu c·ªßa s·ª± ki·ªán
    const endDate = info.event.endStr || startDate; // Ng√†y k·∫øt th√∫c (n·∫øu kh√¥ng c√≥ th√¨ d√πng ng√†y b·∫Øt ƒë·∫ßu)
    toggleCardCompletion(
      cardId,
      {
        onSuccess: () => {
          const months = getMonthsBetween(startDate, endDate); // L·∫•y t·∫•t c·∫£ c√°c th√°ng m√† s·ª± ki·ªán k√©o d√†i qua
          queryClient.invalidateQueries({ queryKey: ["calendar", boardIds, months] });
        },
        onError: (error) => {
          toast.error(error.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ho√†n th√†nh");
        }
      }
    );
  };

  const handleFilterChange = (filters) => {
    console.log("L·ªçc m·ªõi:", filters);
    // TODO: x·ª≠ l√Ω l·ªçc s·ª± ki·ªán n·∫øu c·∫ßn
  };

  return (
    <Box
      sx={{
        padding: "32px",
        height: (theme) =>
          `calc( ${theme.trello.boardContentHeight} + ${theme.trello.boardBarHeight} )`,
        overflow: "auto",
        fontSize: "0.7rem",
        position: "relative",
      }}
    >
      <FullCalendar
        ref={calendarRef}
        locale={viLocale}
        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}
        initialView="dayGridMonth"
        editable={true}
        datesSet={handleDatesSet}
        // ‚úÖ Th√™m thu·ªôc t√≠nh displayEventTime
        displayEventTime={false}
        views={{
          timeGridWeek: {
            slotLabelFormat: { hour: undefined, minute: undefined },
            eventTimeFormat: { hour: undefined, minute: undefined }
          },
          timeGridDay: {
            slotLabelFormat: { hour: undefined, minute: undefined },
            eventTimeFormat: { hour: undefined, minute: undefined }
          }
        }}

        headerToolbar={{
          left: "prev,next today",
          center: "title",
          right: "dayGridMonth,timeGridWeek,timeGridDay,menuButton",
        }}
        buttonText={{
          today: "Ng√†y",
          month: "Th√°ng",
          week: "Tu·∫ßn",
          day: "Ng√†y",
        }}
        eventClick={(info) => {
          const cardId = info.event.id; // ID card l√† event.id
          const boardId = info.event.extendedProps.board_id;
          const boardName = info.event.extendedProps.board_name;
          // console.log(boardName);
          navigate(`/b/${boardId}/${boardName}/c/${cardId}`);
        }}
        events={cardEvents}
        eventDrop={handleEventChange}
        eventResize={handleEventChange}
        eventDidMount={(info) => {
          const { labels = [], members = [], is_completed } = info.event.extendedProps;
          const titleEl = info.el.querySelector(".fc-event-title");
          if (titleEl) {
            const root = ReactDOM.createRoot(titleEl);
            root.render(<EventCard title={info.event.title}
              labels={labels}
              members={members}
              isCompleted={is_completed} // ‚úÖ truy·ªÅn v√†o
              onToggleComplete={() => handleToggleComplete(info)} // ‚¨ÖÔ∏è th√™m h√†m x·ª≠ l√Ω toggle
              eventStart={info.event.start}
              currentDate={info.el.closest('.fc-daygrid-day')?.getAttribute('data-date') || arg.event.start}


            />);
          }
          Object.assign(info.el.style, {
            backgroundColor: "white",
            border: "1px solid #ccc",
            borderRadius: "6px",
            padding: "4px 6px",
            overflow: "hidden",
            height: '100% !important',
            display: 'flex !important',
            flexDirection: 'column',
            position: 'relative', // ƒê·∫£m b·∫£o ph·∫ßn t·ª≠ cha l√† relative
          });

          // Th√™m kho·∫£ng c√°ch gi·ªØa c√°c event trong c√πng 1 ng√†y
          const harness = info.el.closest(".fc-daygrid-event-harness");
          if (harness) {
            harness.style.height = "auto !important"; // ƒê·ªÉ harness √¥m v·ª´a content
            harness.style.overflow = "visible !important"; // Hi·ªÉn th·ªã to√†n b·ªô content
            harness.style.marginBottom = "50px"; // tƒÉng n·∫øu mu·ªën c√°ch r·ªông h∆°n
          }
        }}

      />

      {/* <MenuCalendar
        open={menuOpen}
        onClose={() => setMenuOpen(false)}
        onFilterChange={handleFilterChange}
      /> */}
    </Box>
  );
};

export default Calendar;
