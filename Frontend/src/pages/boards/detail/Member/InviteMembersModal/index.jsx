import React, { useState } from "react";
import { Autocomplete, TextField, Paper, Button, Box, Popper } from "@mui/material";
// import { useSearchMembers } from "../hooks/useSearchMembers"; // üî• Hook g·ªçi API
import { useSearchMembers } from "../../../../../hooks/useWorkspaceInvite";

const MemberSearch = ({ workspaceId, onMemberSelect }) => {
    const [inputValue, setInputValue] = useState("");
    const [selectedUsers, setSelectedUsers] = useState([]); // Theo d√µi user ƒë√£ ch·ªçn
    const [hasTyped, setHasTyped] = useState(false); // Ki·ªÉm tra xem ƒë√£ nh·∫≠p ch·ªØ ch∆∞a

    // üîç G·ªçi API t√¨m ki·∫øm member
    const { data, isLoading } = useSearchMembers(inputValue, workspaceId);
    const members = data?.users || [];

    // üìù X·ª≠ l√Ω khi nh·∫≠p input
    const handleInputChange = (event, value) => {
        setInputValue(value);
        setHasTyped(value.length > 0); // N·∫øu c√≥ ch·ªØ -> true
    };

    // üõ† X·ª≠ l√Ω khi ch·ªçn option
    const handleOptionSelect = (event, newValue) => {
        setSelectedUsers(newValue); // C·∫≠p nh·∫≠t danh s√°ch ƒë√£ ch·ªçn
        onMemberSelect(newValue); // G·ª≠i d·ªØ li·ªáu l√™n parent n·∫øu c·∫ßn
        setInputValue(""); // Reset input sau khi ch·ªçn xong
    };

    return (
        <Box sx={{ display: "flex", flexDirection: "column", gap: 2, width: "100%" }}>
            {/* Ph·∫ßn Input + Button */}
            <Box sx={{ display: "flex", gap: 2, width: "100%" }}>
                <Paper
                    elevation={0}
                    sx={{
                        display: "flex",
                        alignItems: "center",
                        flex: 1,
                        borderRadius: "3px",
                        boxShadow: "inset 0 0 0 1px rgba(9, 30, 66, 0.15)",
                        transition: "background-color 85ms ease, border-color 85ms ease, box-shadow 85ms ease",
                        backgroundColor: "#ffffff",
                        padding: "5px 10px",
                    }}
                >
                    <Autocomplete
                        multiple
                        id="custom-autocomplete"
                        options={
                            isLoading || inputValue.length < 3
                                ? []
                                : members.filter((option) => !selectedUsers.some((user) => user.id === option.id))
                        }
                        getOptionLabel={(option) => option.full_name}
                        filterSelectedOptions
                        disableClearable
                        popupIcon={null}
                        loading={isLoading}
                        noOptionsText={
                            inputValue.length >= 3
                                ? "C√≥ v·∫ª nh∆∞ ng∆∞·ªùi ƒë√≥ kh√¥ng ph·∫£i l√† th√†nh vi√™n. Nh·∫≠p email ƒë·ªÉ m·ªùi h·ªç"
                                : ""
                        }
                        open={isLoading || (inputValue.length >= 3 && members.length > 0)}
                        value={selectedUsers}
                        onChange={handleOptionSelect}
                        fullWidth
                        renderInput={(params) => (
                            <TextField
                                {...params}
                                variant="standard"
                                placeholder="Nh·∫≠p t√™n ho·∫∑c email..."
                                InputProps={{
                                    ...params.InputProps,
                                    disableUnderline: true,
                                }}
                                onChange={(e) => handleInputChange(e, e.target.value)}
                                sx={{
                                    width: "100%",
                                    padding: "5px 5px",
                                }}
                            />
                        )}
                        PopperComponent={(props) => (
                            <Popper {...props} modifiers={[{ name: "offset", options: { offset: [0, 15] } }]} />
                        )}
                        sx={{
                            flex: 1,
                            "& .MuiAutocomplete-tag": {
                                maxWidth: "150px",
                                overflow: "hidden",
                                textOverflow: "ellipsis",
                            },
                            "& .MuiAutocomplete-inputRoot": {
                                maxHeight: "100px",
                                overflowY: "auto",
                                overflowX: "hidden",
                                scrollbarWidth: "thin",
                                "&::-webkit-scrollbar": {
                                    width: "5px",
                                },
                                "&::-webkit-scrollbar-thumb": {
                                    backgroundColor: "#aaa",
                                    borderRadius: "10px",
                                },
                                "&::-webkit-scrollbar-thumb:hover": {
                                    backgroundColor: "#888",
                                },
                            },
                        }}
                    />
                </Paper>
                {selectedUsers.length > 0 && (
                    <Button variant="contained" sx={{ height: "40px", textTransform: "none" }}>
                        G·ª≠i l·ªùi m·ªùi
                    </Button>
                )}
            </Box>

            {/* TextField ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ selectedUsers */}
            {selectedUsers.length > 0 && (
                <TextField
                    id="outlined-textarea"
                    placeholder="Tham gia Kh√¥ng gian l√†m vi·ªác n√†y ƒë·ªÉ c·ªông t√°c v·ªõi t√¥i!"
                    multiline
                    maxRows={2}
                    fullWidth
                    sx={{
                        "& .MuiInputBase-input": { color: "gray" },
                        "& .MuiInputLabel-root": { color: "#9FADBC" },
                        "& .MuiInputLabel-root.Mui-focused": { color: "#579DFF" },
                    }}
                />
            )}
        </Box>
    );
};

export default MemberSearch;
