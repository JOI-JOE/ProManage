import { Fragment, useEffect, useRef, useState } from "react";
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  Avatar,
  Button,
  Chip,
  Paper,
  Grid,
  IconButton,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  Stack,
  Autocomplete,
  SvgIcon,
  Popper,
  ListItemAvatar,
} from "@mui/material";
import LockIcon from "@mui/icons-material/Lock";
import EditIcon from "@mui/icons-material/Edit";
import CloseIcon from "@mui/icons-material/Close";
import { useParams } from "react-router-dom";
import loadingLogo from "~/assets/loading.svg?react";

import MemberItem from "./MemberItem";
import GenerateLink from "../../../../components/GenerateLink";
import { useGetWorkspaceByName } from "../../../../hooks/useWorkspace";
import {
  useAddMemberToWorkspace,
  useCancelInvitationWorkspace,
  useConfirmWorkspaceMember,
  useCreateInviteWorkspace,
  useSearchMembers,
} from "../../../../hooks/useWorkspaceInvite";
import WorkspaceInfo from "../../../../components/WorkspaceInfo";
import { useGetInviteWorkspace } from "../../../../hooks/useWorkspaceInvite";

const Member = () => {
  const { workspaceName } = useParams();

  // D·ªØ li·ªáu ƒë·ªÉ l·∫•y ƒë∆∞·ª£c workspace b·∫±ng t√™n
  const {
    data: workspace,
    isLoading: isLoadingWorkspace,
    isError: isWorkspaceError,
    error: workspaceError,
  } = useGetWorkspaceByName(workspaceName, {
    enabled: !!workspaceName, // Ch·ªâ fetch khi workspaceName t·ªìn t·∫°i
  });

  // D·ªØ li·ªáu ƒë·ªÉ l·∫•y ƒë∆∞·ª£c inviteToken
  const {
    data: inviteData,
    isLoading: isInviteLoading,
    refetch,
  } = useGetInviteWorkspace(workspace?.id, {
    enabled: !!workspace?.id,
  });

  const { mutate: addMember, isLoading, error } = useAddMemberToWorkspace();
  const { mutate: confirmMember } = useConfirmWorkspaceMember();

  const [inputValue, setInputValue] = useState("");
  const [options, setOptions] = useState([]);
  const [debouncedValue, setDebouncedValue] = useState("");
  const [open, setOpen] = useState(false);
  const [selectedUsers, setSelectedUsers] = useState([]); // Lu√¥n l√† m·∫£ng r·ªóng ban ƒë·∫ßu
  const [selectedUserIds, setSelectedUserIds] = useState(new Set());
  const [invitationMessage, setInvitationMessage] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);

  const { data: memberSearch, isLoading: isLoadingMember } = useSearchMembers(
    debouncedValue,
    workspace?.id
  );

  // ‚úÖ T·∫°o debounce b·∫±ng useRef -> Tr√°nh spam API khi g√µ nhanh
  const debounceTimeout = useRef(null);

  const handleInputChange = (event) => {
    const value = event.target.value.trim();
    setInputValue(value);

    if (debounceTimeout.current) clearTimeout(debounceTimeout.current);

    debounceTimeout.current = setTimeout(() => {
      setDebouncedValue(value.length >= 3 ? value : "");
    }, 300);
  };

  useEffect(() => {
    if (debouncedValue.length >= 3) {
      setOptions(memberSearch || []);
      setOpen(true);
    } else {
      setOptions([]);
      setOpen(false);
    }
  }, [debouncedValue, memberSearch]);

  const handleOptionSelect = (event, newValue) => {
    const newIds = newValue.map((user) => user.id);

    setSelectedUsers(newValue);
    setSelectedUserIds((prevIds) => [...new Set([...prevIds, ...newIds])]);

    if (newIds.length > 0) {
      console.log("üì¢ Sending API with userIds:", newIds);

      addMember({ workspaceId: workspace.id, userIds: newIds });
    }
    setInputValue("");
    setOptions([]);
  };

  const handleSendInvitations = async () => {
    if (!selectedUsers.length) return;

    const memberIds = selectedUsers.map((user) => user.id);
    console.log("üì© ƒêang g·ª≠i l·ªùi m·ªùi:", memberIds);

    setIsProcessing(true); // B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã loading

    try {
      // Duy·ªát qua t·ª´ng memberId v√† g·ª≠i y√™u c·∫ßu m·ªùi
      for (const memberId of memberIds) {
        await confirmMember({
          workspaceId: workspace.id,
          memberId,
          invitationMessage,
        });
      }

      console.log("‚úÖ T·∫•t c·∫£ l·ªùi m·ªùi ƒë√£ g·ª≠i!");
      await new Promise((resolve) => setTimeout(resolve, 1000)); // Gi·ªØ loading m·ªôt l√∫c tr∆∞·ªõc khi ƒë√≥ng

      handleCloseInvite(); // ƒê√≥ng modal sau khi ho√†n t·∫•t
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i l·ªùi m·ªùi:", error);
    } finally {
      setIsProcessing(false); // M·ªü l·∫°i n√∫t sau khi ho√†n th√†nh
    }
  };

  const { mutate: createInviteLink, isLoading: isCreatingInvite } =
    useCreateInviteWorkspace();
  const { mutate: cancelInviteLink, isLoading: isCancelingInvite } =
    useCancelInvitationWorkspace();

  const [isFormVisible, setFormVisible] = useState(false);
  const [isInviteOpen, setInviteOpen] = useState(false);
  const [linkCopied, setLinkCopied] = useState(false);
  const [isLinkActive, setIsLinkActive] = useState(false);
  const [showCopiedMessage, setShowCopiedMessage] = useState(false);

  const handleOpenInvite = () => {
    setInviteOpen(true);
    setLinkCopied(false);
    setIsLinkActive(false);
  };

  const toggleFormVisibility = () => {
    setFormVisible((prev) => !prev);
  };

  const handleCloseInvite = () => {
    if (isProcessing) return; // N·∫øu ƒëang x·ª≠ l√Ω, kh√¥ng cho ƒë√≥ng b·∫£ng

    setInviteOpen(false);
    setInputValue("");
    setSelectedUsers([]);
    setOptions([]);
  };

  const members = workspace?.members || [];

  const handleGenerateLink = async () => {
    if (!workspace?.id) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ID c·ªßa workspace");
    }
    return new Promise((resolve, reject) => {
      createInviteLink(
        { workspaceId: workspace.id },
        {
          onSuccess: (data) => {
            resolve(data.secret); // Tr·∫£ v·ªÅ li√™n k·∫øt m·ªõi
          },
          onError: (error) => {
            console.error("L·ªói khi t·∫°o link m·ªùi:", error);
            reject(error); // Tr·∫£ v·ªÅ l·ªói
          },
        }
      );
    });
  };

  const handleDeleteLink = async () => {
    if (!workspace?.id) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ID c·ªßa workspace");
    }
    return cancelInviteLink({ workspaceId: workspace.id });
  };

  return (
    <Box
      sx={{
        width: "100%",
        maxWidth: "1200px",
        padding: "32px 20px 20px 20px",
        // margin: "30px auto",

        overflow: "auto",
        maxHeight: "579px", // Gi·ªõi h·∫°n chi·ªÅu cao ƒë·ªÉ k√≠ch ho·∫°t scroll
        "&::-webkit-scrollbar": {
          width: "8px",
          height: "8px",
        },
        "&::-webkit-scrollbar-track": {
          background: "#f1f1f1",
          borderRadius: "4px",
        },
        "&::-webkit-scrollbar-thumb": {
          background: "#888",
          borderRadius: "4px",
        },
        "&::-webkit-scrollbar-thumb:hover": {
          background: "#555",
        },
      }}
    >
      {/* Header ch·ª©a Ti√™u ƒë·ªÅ v√† N√∫t M·ªùi Th√†nh Vi√™n */}
      <Box
        sx={{
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          borderBottom: "1px solid #D3D3D3",
          paddingBottom: "40px",
          width: "100%",
          maxWidth: "1100px",
          margin: "0 auto",
        }}
      >
        {!isFormVisible ? (
          <Box sx={{ display: "flex", alignItems: "center", gap: "10px" }}>
            <Avatar
              sx={{
                bgcolor: "#5D87FF",
                width: "50px",
                height: "50px",
                marginLeft: "100px",
              }}
            >
              <span style={{ fontSize: "1.2rem", fontWeight: "bold" }}>
                {workspace?.display_name.charAt(0).toUpperCase()}
              </span>
            </Avatar>
            <Box>
              <Box
                sx={{
                  display: "flex",
                  alignItems: "center",
                  gap: "5px",
                }}
              >
                <Typography fontWeight="bold" sx={{ fontSize: "1.2rem" }}>
                  {workspace?.display_name}
                </Typography>
                <IconButton
                  onClick={toggleFormVisibility}
                  sx={{
                    color: "gray",
                    "&:hover": { backgroundColor: "transparent" },
                  }}
                >
                  <EditIcon sx={{ fontSize: 24 }} />
                </IconButton>
              </Box>
              <Box
                sx={{
                  display: "flex",
                  alignItems: "center",
                  gap: "5px",
                  color: "gray",
                }}
              >
                <LockIcon sx={{ fontSize: 14 }} />
                <Typography sx={{ fontSize: 14 }}>Ri√™ng t∆∞</Typography>
              </Box>
            </Box>
          </Box>
        ) : (
          <WorkspaceInfo
            workspaceInfo={workspace}
            onCancel={toggleFormVisibility} // ƒê√≥ng form khi h·ªßy
          />
        )}

        <Button
          variant="contained"
          sx={{
            bgcolor: "#026AA7",
            textTransform: "none",
            fontSize: "14px",
            fontWeight: "bold",
            padding: "8px 12px",
            boxShadow: "none",
            marginRight: "60px",
            "&:hover": { bgcolor: "#005A96" },
          }}
          onClick={handleOpenInvite}
        >
          M·ªùi c√°c th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác
        </Button>
      </Box>

      {/* N·ªôi dung */}
      <Grid
        container
        spacing={2}
        sx={{ width: "100%", maxWidth: "1100px", margin: "0 auto" }}
      >
        {/* C·ªôt tr√°i:  */}
        <Grid item xs={12} sm={3} md={2}>
          <Box sx={{ padding: "0px", width: "100%" }}>
            <Typography
              variant="h6"
              fontWeight="bold"
              sx={{ fontSize: "0.9rem" }}
            >
              Ng∆∞·ªùi c·ªông t√°c
            </Typography>
            <Chip
              label="1 / 10"
              size="small"
              sx={{ fontSize: "12px", backgroundColor: "#F4F5F7" }}
            />

            <Paper
              elevation={0}
              sx={{
                backgroundColor: "#E8F0FE",
                padding: 1,
                borderRadius: 2,
                mt: 2,
              }}
            >
              <Typography variant="body2" color="primary" fontWeight="bold">
                Th√†nh vi√™n kh√¥ng gian l√†m vi·ªác (1)
              </Typography>
            </Paper>

            <List sx={{ padding: 0, marginTop: 2 }}>
              <ListItem divider>
                <ListItemText primary="Kh√°ch (0)" />
              </ListItem>
              <ListItem>
                <ListItemText primary="Y√™u c·∫ßu tham gia (0)" />
              </ListItem>
            </List>
          </Box>
        </Grid>

        {/* C·ªôt ph·∫£i:  */}
        <Grid item xs={12} sm={9} md={10}>
          <Box
            sx={{
              padding: "20px",
              width: "100%",
              borderBottom: "1px solid #D3D3D3",
            }}
          >
            <Typography
              variant="h6"
              fontWeight="bold"
              sx={{ fontSize: "0.9rem" }}
            >
              Th√†nh vi√™n kh√¥ng gian l√†m vi·ªác (1)
            </Typography>
            <Box sx={{ borderBottom: "1px solid #D3D3D3", pb: 2, mb: 2 }}>
              <Typography
                variant="body2"
                sx={{ color: "gray", fontSize: "0.7rem" }}
              >
                C√°c th√†nh vi√™n trong Kh√¥ng gian l√†m vi·ªác c√≥ th·ªÉ xem v√† tham gia
                t·∫•t c·∫£ c√°c b·∫£ng Kh√¥ng gian l√†m vi·ªác hi·ªÉn th·ªã v√† t·∫°o ra c√°c b·∫£ng
                m·ªõi trong Kh√¥ng gian l√†m vi·ªác.
              </Typography>
            </Box>

            <Typography
              variant="h6"
              fontWeight="bold"
              sx={{ mt: 2, fontSize: "0.9rem" }}
            >
              M·ªùi c√°c th√†nh vi√™n tham gia c√πng b·∫°n
            </Typography>

            <Box
              sx={{
                borderBottom: "1px solid #D3D3D3",
                pb: 2,
                mb: 2,
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
              }}
            >
              <Typography
                variant="body2"
                sx={{ color: "gray", flex: 1, fontSize: "0.7rem" }}
              >
                B·∫•t k·ª≥ ai c√≥ li√™n k·∫øt m·ªùi ƒë·ªÅu c√≥ th·ªÉ tham gia Kh√¥ng gian l√†m
                vi·ªác mi·ªÖn ph√≠ n√†y. B·∫°n c≈©ng c√≥ th·ªÉ t·∫Øt v√† t·∫°o li√™n k·∫øt m·ªõi cho
                Kh√¥ng gian l√†m vi·ªác n√†y b·∫•t c·ª© l√∫c n√†o. S·ªë l·ªùi m·ªùi ƒëang ch·ªù x·ª≠
                l√Ω ƒë∆∞·ª£c t√≠nh v√†o gi·ªõi h·∫°n 10 ng∆∞·ªùi c·ªông t√°c.
              </Typography>

              {/* <Button variant="outlined" startIcon={<LinkIcon />}>
                M·ªùi b·∫±ng li√™n k·∫øt
              </Button> */}
            </Box>

            {/* L·ªçc th√†nh vi√™n */}
            <Box sx={{ borderBottom: "1px solid #D3D3D3", pb: 2, mb: 2 }}>
              <TextField
                fullWidth
                size="small"
                placeholder="L·ªçc theo t√™n"
                sx={{
                  mb: 2,
                  width: "200px",
                  "& .MuiInputBase-input": { fontSize: "0.6rem" },
                }}
              />
            </Box>

            {/* Danh s√°ch th√†nh vi√™n */}
            <Box
              sx={{
                display: "flex",
                flexDirection: "column", // Hi·ªÉn th·ªã theo h√†ng d·ªçc
                alignItems: "flex-start", // CƒÉn l·ªÅ tr√°i cho c√°c th√†nh vi√™n
                gap: 2, // Kho·∫£ng c√°ch gi·ªØa c√°c th√†nh vi√™n
              }}
            >
              {/* Th√¥ng tin th√†nh vi√™n */}
              {members?.map((member, index) => (
                <Box
                  key={`${member.id}-${index}`} // K·∫øt h·ª£p member.id v√† index ƒë·ªÉ t·∫°o key duy nh·∫•t
                  id="workspace-member-list"
                >
                  <MemberItem member={member} />{" "}
                  {/* Truy·ªÅn d·ªØ li·ªáu member v√†o MemberItem */}
                </Box>
              ))}
            </Box>
          </Box>
        </Grid>
      </Grid>

      {/* Modal M·ªùi Th√†nh Vi√™n */}
      <Dialog
        open={isInviteOpen}
        onClose={handleCloseInvite}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle sx={{ fontSize: "20px" }}>
          M·ªùi v√†o Kh√¥ng gian l√†m vi·ªác
          <IconButton
            sx={{ position: "absolute", right: 8, top: 8 }}
            onClick={handleCloseInvite}
          >
            <CloseIcon />
          </IconButton>
        </DialogTitle>
        <DialogContent>
          <Box
            sx={{
              display: "flex",
              flexDirection: "column",
              gap: 2,
              width: "100%",
            }}
          >
            <Box sx={{ display: "flex", gap: 2, width: "100%" }}>
              <Paper
                elevation={0}
                sx={{
                  display: "flex",
                  alignItems: "center",
                  flex: 1, // üî• Gi√∫p Paper m·ªü r·ªông full width
                  borderRadius: "3px",
                  boxShadow: "inset 0 0 0 1px rgba(9, 30, 66, 0.15)",
                  transition:
                    "background-color 85ms ease, border-color 85ms ease, box-shadow 85ms ease",
                  backgroundColor: "#ffffff",
                  padding: "5px 10px", // üî• T·∫°o kho·∫£ng c√°ch padding ƒë·∫πp h∆°n
                }}
              >
                <Autocomplete
                  multiple
                  id="custom-autocomplete"
                  options={options.filter(
                    (option) =>
                      !selectedUsers.some((user) => user.id === option.id)
                  )}
                  getOptionLabel={(option) => option.full_name}
                  getOptionDisabled={(option) => option.joined} // üî• V√¥ hi·ªáu h√≥a n·∫øu ƒë√£ joined
                  filterOptions={(options, state) =>
                    options.filter(
                      (option) =>
                        option.full_name
                          ?.toLowerCase()
                          .includes(state.inputValue.toLowerCase()) ||
                        option.user_name
                          ?.toLowerCase()
                          .includes(state.inputValue.toLowerCase()) ||
                        option.email
                          ?.toLowerCase()
                          .includes(state.inputValue.toLowerCase())
                    )
                  }
                  disableClearable
                  popupIcon={null}
                  loading={isLoadingMember}
                  loadingText={
                    <Box
                      sx={{ display: "flex", justifyContent: "center", py: 1 }}
                    >
                      <SvgIcon
                        component={loadingLogo}
                        sx={{ width: 50, height: 50, transform: "scale(0.5)" }}
                        viewBox="0 0 24 24"
                        inheritViewBox
                      />
                    </Box>
                  }
                  noOptionsText={
                    isLoadingMember
                      ? "ƒêang t√¨m ki·∫øm..."
                      : inputValue.length >= 3
                        ? "Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†o."
                        : ""
                  }
                  open={open}
                  value={selectedUsers}
                  onChange={handleOptionSelect}
                  fullWidth
                  renderOption={(props, option) => (
                    <ListItem
                      {...props}
                      alignItems="flex-start"
                      disabled={option.joined}
                    >
                      <ListItemAvatar>
                        <Avatar
                          alt={option.full_name}
                          src={
                            option.image || "/static/images/avatar/default.jpg"
                          }
                        />
                      </ListItemAvatar>
                      <ListItemText
                        primary={option.full_name}
                        secondary={
                          <Fragment>
                            <Typography
                              component="span"
                              variant="body2"
                              sx={{ color: "text.primary", display: "inline" }}
                            >
                              {option.joined
                                ? option.memberType === "admin"
                                  ? " (Qu·∫£n tr·ªã vi√™n c·ªßa kh√¥ng gian l√†m vi·ªác)"
                                  : " (Th√†nh vi√™n kh√¥ng gian l√†m vi·ªác)"
                                : ""}
                            </Typography>
                          </Fragment>
                        }
                      />
                    </ListItem>
                  )}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      variant="standard"
                      placeholder="Nh·∫≠p t√™n ho·∫∑c email..."
                      InputProps={{
                        ...params.InputProps,
                        disableUnderline: true,
                      }}
                      onChange={handleInputChange}
                      sx={{ width: "100%", padding: "5px 5px" }}
                    />
                  )}
                  PopperComponent={(props) => (
                    <Popper
                      {...props}
                      modifiers={[
                        { name: "offset", options: { offset: [0, 15] } },
                      ]}
                    />
                  )}
                  sx={{
                    flex: 1,
                    "& .MuiAutocomplete-tag": {
                      maxWidth: "150px",
                      overflow: "hidden",
                      textOverflow: "ellipsis",
                    },
                    "& .MuiAutocomplete-inputRoot": {
                      maxHeight: "100px",
                      overflowY: "auto",
                      overflowX: "hidden",
                      scrollbarWidth: "thin",
                      "&::-webkit-scrollbar": { width: "5px" },
                      "&::-webkit-scrollbar-thumb": {
                        backgroundColor: "#aaa",
                        borderRadius: "10px",
                      },
                      "&::-webkit-scrollbar-thumb:hover": {
                        backgroundColor: "#888",
                      },
                    },
                  }}
                />
              </Paper>
              {selectedUsers.length > 0 &&
                (isProcessing ? (
                  <Box
                    sx={{
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      height: "100%",
                    }}
                  >
                    <SvgIcon
                      component={loadingLogo}
                      sx={{
                        width: 50,
                        height: 50,
                        transform: "scale(0.5)", // Gi·ªØ nguy√™n t·ª∑ l·ªá nh∆∞ng thu nh·ªè
                      }}
                      viewBox="0 0 24 24"
                      inheritViewBox
                    />
                  </Box>
                ) : (
                  <Button
                    variant="contained"
                    sx={{ height: "40px", textTransform: "none" }}
                    onClick={handleSendInvitations}
                    disabled={isProcessing} // Ch·∫∑n nh·∫•n n√∫t khi ƒëang loading
                  >
                    G·ª≠i l·ªùi m·ªùi
                  </Button>
                ))}
            </Box>
            {selectedUsers.length > 0 && (
              <TextField
                id="outlined-textarea"
                placeholder="Tham gia Kh√¥ng gian l√†m vi·ªác Trello n√†y ƒë·ªÉ b·∫Øt ƒë·∫ßu c·ªông t√°c v·ªõi t√¥i!"
                multiline
                maxRows={2}
                fullWidth
                value={invitationMessage} // G√°n gi√° tr·ªã t·ª´ state
                onChange={(e) => setInvitationMessage(e.target.value)} // C·∫≠p nh·∫≠t state khi nh·∫≠p
                disabled={isProcessing} // V√¥ hi·ªáu h√≥a khi ƒëang x·ª≠ l√Ω
                sx={{
                  "& .MuiInputBase-input": { color: "gray" },
                  "& .MuiInputLabel-root": { color: "#9FADBC" },
                  "& .MuiInputLabel-root.Mui-focused": { color: "#579DFF" },
                }}
              />
            )}
          </Box>

          {isInviteLoading || isLoadingWorkspace ? (
            <Box
              sx={{
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                height: "100%",
              }}
            >
              <SvgIcon
                component={loadingLogo}
                sx={{
                  width: 50,
                  height: 50,
                  transform: "scale(0.5)", // Gi·ªØ nguy√™n t·ª∑ l·ªá nh∆∞ng thu nh·ªè
                }}
                viewBox="0 0 24 24"
                inheritViewBox
              />
            </Box>
          ) : (
            // ƒê√¢y l√† component d√πng ƒë·ªÉ t·∫°o ra invite token
            <GenerateLink
              onGenerateLink={handleGenerateLink}
              onDeleteLink={handleDeleteLink}
              secret={inviteData?.invitationSecret}
              workspaceId={workspace?.id}
            />
          )}
        </DialogContent>
      </Dialog>
    </Box>
  );
};
export default Member;
